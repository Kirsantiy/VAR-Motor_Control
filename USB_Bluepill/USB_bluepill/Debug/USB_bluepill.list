
USB_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009638  08009638  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009638  08009638  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009638  08009638  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009638  08009638  00019638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001398  2000017c  080097bc  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001514  080097bc  00021514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013384  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339e  00000000  00000000  00033529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  000368c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00037960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae6d  00000000  00000000  00038850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015116  00000000  00000000  000536bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d218  00000000  00000000  000687d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f59eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004410  00000000  00000000  000f5a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080095b4 	.word	0x080095b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080095b4 	.word	0x080095b4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <encoder_init>:
 *      Author: Kirsablo
 */

#include "Encoder.h"

void encoder_init(volatile Encoder *enc, int16_t clicks, int16_t gear_ratio, int16_t prescaler, int16_t update_frequency, TIM_HandleTypeDef *htim) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4603      	mov	r3, r0
 8000744:	817b      	strh	r3, [r7, #10]
 8000746:	460b      	mov	r3, r1
 8000748:	813b      	strh	r3, [r7, #8]
 800074a:	4613      	mov	r3, r2
 800074c:	80fb      	strh	r3, [r7, #6]
    enc->Encoder_Clicks = clicks;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	897a      	ldrh	r2, [r7, #10]
 8000752:	841a      	strh	r2, [r3, #32]
    enc->Gear_Ratio = gear_ratio;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	893a      	ldrh	r2, [r7, #8]
 8000758:	845a      	strh	r2, [r3, #34]	; 0x22
    enc->prescaler = prescaler;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	88fa      	ldrh	r2, [r7, #6]
 800075e:	849a      	strh	r2, [r3, #36]	; 0x24
    enc->htim = htim;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	69fa      	ldr	r2, [r7, #28]
 8000764:	61da      	str	r2, [r3, #28]
    enc->update_frequency = update_frequency;
 8000766:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fda8 	bl	80002c0 <__aeabi_i2f>
 8000770:	4602      	mov	r2, r0
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <update_position>:

void update_position(volatile Encoder *enc){
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	enc->counter = __HAL_TIM_GET_COUNTER(enc->htim);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
	enc->count = (int16_t)enc->counter;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000798:	b21b      	sxth	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
	enc->clicks = enc->count/2;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a4:	0fda      	lsrs	r2, r3, #31
 80007a6:	4413      	add	r3, r2
 80007a8:	105b      	asrs	r3, r3, #1
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	861a      	strh	r2, [r3, #48]	; 0x30
	enc->angle_motor = 360*enc->clicks/(enc->Encoder_Clicks/enc->prescaler);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80007bc:	fb03 f202 	mul.w	r2, r3, r2
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	8c1b      	ldrh	r3, [r3, #32]
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007cc:	b21b      	sxth	r3, r3
 80007ce:	fb91 f3f3 	sdiv	r3, r1, r3
 80007d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd72 	bl	80002c0 <__aeabi_i2f>
 80007dc:	4602      	mov	r2, r0
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
	enc->angle_shaft = enc->angle_motor/enc->Gear_Ratio;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681c      	ldr	r4, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fd67 	bl	80002c0 <__aeabi_i2f>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4620      	mov	r0, r4
 80007f8:	f7ff fe6a 	bl	80004d0 <__aeabi_fdiv>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	605a      	str	r2, [r3, #4]
	if(enc->angle_shaft > 360){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	491a      	ldr	r1, [pc, #104]	; (8000874 <update_position+0xf4>)
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff68 	bl	80006e0 <__aeabi_fcmpgt>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00f      	beq.n	8000836 <update_position+0xb6>
		__HAL_TIM_GET_COUNTER(enc->htim) = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
		enc->turns++;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fc95 	bl	8000158 <__addsf3>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60da      	str	r2, [r3, #12]
	}
	if(enc->angle_shaft < -360){
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	490f      	ldr	r1, [pc, #60]	; (8000878 <update_position+0xf8>)
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff31 	bl	80006a4 <__aeabi_fcmplt>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d100      	bne.n	800084a <update_position+0xca>
		__HAL_TIM_GET_COUNTER(enc->htim) = 0;
		enc->turns--;
	}

}
 8000848:	e00f      	b.n	800086a <update_position+0xea>
		__HAL_TIM_GET_COUNTER(enc->htim) = 0;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
		enc->turns--;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fc79 	bl	8000154 <__aeabi_fsub>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60da      	str	r2, [r3, #12]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	bf00      	nop
 8000874:	43b40000 	.word	0x43b40000
 8000878:	c3b40000 	.word	0xc3b40000

0800087c <update_speed>:
void update_speed(volatile Encoder *enc){
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	enc->x++;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
	if(enc->x>enc->update_frequency){
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fd14 	bl	80002c0 <__aeabi_i2f>
 8000898:	4602      	mov	r2, r0
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089e:	4619      	mov	r1, r3
 80008a0:	4610      	mov	r0, r2
 80008a2:	f7ff ff1d 	bl	80006e0 <__aeabi_fcmpgt>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d100      	bne.n	80008ae <update_speed+0x32>
		enc->prev_angle_shaft = enc->angle_shaft;
		enc->motor_rot_velocity = enc->shaft_rot_velocity*enc->Gear_Ratio;
		enc->prev_turns = enc->turns;
		enc->x = 0;
	}
}
 80008ac:	e04e      	b.n	800094c <update_speed+0xd0>
		if(enc->turns == enc->prev_turns){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68da      	ldr	r2, [r3, #12]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	4619      	mov	r1, r3
 80008b8:	4610      	mov	r0, r2
 80008ba:	f7ff fee9 	bl	8000690 <__aeabi_fcmpeq>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d027      	beq.n	8000914 <update_speed+0x98>
			enc->shaft_rot_velocity = (enc->angle_shaft - enc->prev_angle_shaft)/(enc->update_frequency/1000);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4610      	mov	r0, r2
 80008d0:	f7ff fc40 	bl	8000154 <__aeabi_fsub>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461c      	mov	r4, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008dc:	491d      	ldr	r1, [pc, #116]	; (8000954 <update_speed+0xd8>)
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fdf6 	bl	80004d0 <__aeabi_fdiv>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4619      	mov	r1, r3
 80008e8:	4620      	mov	r0, r4
 80008ea:	f7ff fdf1 	bl	80004d0 <__aeabi_fdiv>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	615a      	str	r2, [r3, #20]
			enc->shaft_rot_velocity = enc->shaft_rot_velocity*60/360;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4917      	ldr	r1, [pc, #92]	; (8000958 <update_speed+0xdc>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fd33 	bl	8000368 <__aeabi_fmul>
 8000902:	4603      	mov	r3, r0
 8000904:	4915      	ldr	r1, [pc, #84]	; (800095c <update_speed+0xe0>)
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fde2 	bl	80004d0 <__aeabi_fdiv>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	615a      	str	r2, [r3, #20]
		enc->prev_angle_shaft = enc->angle_shaft;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	609a      	str	r2, [r3, #8]
		enc->motor_rot_velocity = enc->shaft_rot_velocity*enc->Gear_Ratio;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695c      	ldr	r4, [r3, #20]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000924:	b21b      	sxth	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fcca 	bl	80002c0 <__aeabi_i2f>
 800092c:	4603      	mov	r3, r0
 800092e:	4619      	mov	r1, r3
 8000930:	4620      	mov	r0, r4
 8000932:	f7ff fd19 	bl	8000368 <__aeabi_fmul>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	619a      	str	r2, [r3, #24]
		enc->prev_turns = enc->turns;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68da      	ldr	r2, [r3, #12]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	611a      	str	r2, [r3, #16]
		enc->x = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	447a0000 	.word	0x447a0000
 8000958:	42700000 	.word	0x42700000
 800095c:	43b40000 	.word	0x43b40000

08000960 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_GPIO_Init+0x8c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_GPIO_Init+0x8c>)
 800097a:	f043 0320 	orr.w	r3, r3, #32
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_GPIO_Init+0x8c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_GPIO_Init+0x8c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a16      	ldr	r2, [pc, #88]	; (80009ec <MX_GPIO_Init+0x8c>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_GPIO_Init+0x8c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_GPIO_Init+0x8c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <MX_GPIO_Init+0x8c>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_GPIO_Init+0x8c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2103      	movs	r1, #3
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0x90>)
 80009c2:	f000 fff1 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 80009c6:	2303      	movs	r3, #3
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0x90>)
 80009de:	f000 fe5f 	bl	80016a0 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010c00 	.word	0x40010c00

080009f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009fa:	f000 fce1 	bl	80013c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009fe:	f000 f8cb 	bl	8000b98 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a02:	f7ff ffad 	bl	8000960 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000a06:	f008 f8fb 	bl	8008c00 <MX_USB_DEVICE_Init>
	MX_TIM1_Init();
 8000a0a:	f000 fac1 	bl	8000f90 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000a0e:	f000 fb3f 	bl	8001090 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000a12:	f000 fb97 	bl	8001144 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000a16:	484d      	ldr	r0, [pc, #308]	; (8000b4c <main+0x158>)
 8000a18:	f003 f9e0 	bl	8003ddc <HAL_TIM_Base_Start_IT>

	__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8000a1c:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <main+0x15c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f06f 0201 	mvn.w	r2, #1
 8000a24:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000a26:	213c      	movs	r1, #60	; 0x3c
 8000a28:	4849      	ldr	r0, [pc, #292]	; (8000b50 <main+0x15c>)
 8000a2a:	f003 fc0b 	bl	8004244 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4848      	ldr	r0, [pc, #288]	; (8000b54 <main+0x160>)
 8000a32:	f003 fac3 	bl	8003fbc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8000a36:	4847      	ldr	r0, [pc, #284]	; (8000b54 <main+0x160>)
 8000a38:	f003 f9d0 	bl	8003ddc <HAL_TIM_Base_Start_IT>
	deltt = 0.0005; // 2000 Гц частота расчетов и TIM3
 8000a3c:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <main+0x164>)
 8000a3e:	4a47      	ldr	r2, [pc, #284]	; (8000b5c <main+0x168>)
 8000a40:	601a      	str	r2, [r3, #0]

	encoder_init(&Enc1, 500, 22, 22, 10, &htim4);
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <main+0x15c>)
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	230a      	movs	r3, #10
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2316      	movs	r3, #22
 8000a4c:	2216      	movs	r2, #22
 8000a4e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a52:	4843      	ldr	r0, [pc, #268]	; (8000b60 <main+0x16c>)
 8000a54:	f7ff fe6e 	bl	8000734 <encoder_init>
	pid_init(&P_angle, 330, 0, 0, 9000, -9000, deltt); // 500
 8000a58:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <main+0x164>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <main+0x170>)
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <main+0x174>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	f04f 0300 	mov.w	r3, #0
 8000a6a:	f04f 0200 	mov.w	r2, #0
 8000a6e:	493f      	ldr	r1, [pc, #252]	; (8000b6c <main+0x178>)
 8000a70:	483f      	ldr	r0, [pc, #252]	; (8000b70 <main+0x17c>)
 8000a72:	f000 f8f0 	bl	8000c56 <pid_init>
	pid_init(&PI_velocity, 0.12, 1, 0, 998, -998, deltt); // 0.16 0.83
 8000a76:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <main+0x164>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	9302      	str	r3, [sp, #8]
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <main+0x180>)
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <main+0x184>)
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a8c:	493b      	ldr	r1, [pc, #236]	; (8000b7c <main+0x188>)
 8000a8e:	483c      	ldr	r0, [pc, #240]	; (8000b80 <main+0x18c>)
 8000a90:	f000 f8e1 	bl	8000c56 <pid_init>

	setpoint = 0;
 8000a94:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <main+0x190>)
 8000a96:	f04f 0200 	mov.w	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		setpoint = receive;
 8000a9c:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <main+0x194>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fc0c 	bl	80002c0 <__aeabi_i2f>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a36      	ldr	r2, [pc, #216]	; (8000b84 <main+0x190>)
 8000aac:	6013      	str	r3, [r2, #0]
		P_angle.feedback = Enc1.angle_shaft + Enc1.turns * 360;
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <main+0x16c>)
 8000ab0:	685c      	ldr	r4, [r3, #4]
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <main+0x16c>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	4935      	ldr	r1, [pc, #212]	; (8000b8c <main+0x198>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fc55 	bl	8000368 <__aeabi_fmul>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f7ff fb48 	bl	8000158 <__addsf3>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <main+0x17c>)
 8000ace:	605a      	str	r2, [r3, #4]

		P_angle.setpoint = setpoint;
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <main+0x190>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <main+0x17c>)
 8000ad6:	6013      	str	r3, [r2, #0]
		PI_velocity.setpoint = P_angle.Out;
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <main+0x17c>)
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <main+0x18c>)
 8000ade:	6013      	str	r3, [r2, #0]
		//	PI_velocity.setpoint = setpoint;
		PI_velocity.feedback = Enc1.motor_rot_velocity;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <main+0x16c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <main+0x18c>)
 8000ae6:	6053      	str	r3, [r2, #4]
		if (PI_velocity.Out > 0) {
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <main+0x18c>)
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	f04f 0100 	mov.w	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fdf5 	bl	80006e0 <__aeabi_fcmpgt>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d012      	beq.n	8000b22 <main+0x12e>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2101      	movs	r1, #1
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <main+0x19c>)
 8000b02:	f000 ff51 	bl	80019a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4821      	ldr	r0, [pc, #132]	; (8000b90 <main+0x19c>)
 8000b0c:	f000 ff4c 	bl	80019a8 <HAL_GPIO_WritePin>
			TIM3->CCR1 = PI_velocity.Out;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <main+0x18c>)
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	4c1f      	ldr	r4, [pc, #124]	; (8000b94 <main+0x1a0>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fdec 	bl	80006f4 <__aeabi_f2uiz>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	6363      	str	r3, [r4, #52]	; 0x34
 8000b20:	e7bc      	b.n	8000a9c <main+0xa8>
		} else {
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	481a      	ldr	r0, [pc, #104]	; (8000b90 <main+0x19c>)
 8000b28:	f000 ff3e 	bl	80019a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4817      	ldr	r0, [pc, #92]	; (8000b90 <main+0x19c>)
 8000b32:	f000 ff39 	bl	80019a8 <HAL_GPIO_WritePin>
			TIM3->CCR1 = -PI_velocity.Out;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <main+0x18c>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	4c15      	ldr	r4, [pc, #84]	; (8000b94 <main+0x1a0>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdd7 	bl	80006f4 <__aeabi_f2uiz>
 8000b46:	4603      	mov	r3, r0
 8000b48:	6363      	str	r3, [r4, #52]	; 0x34
		setpoint = receive;
 8000b4a:	e7a7      	b.n	8000a9c <main+0xa8>
 8000b4c:	2000025c 	.word	0x2000025c
 8000b50:	200002ec 	.word	0x200002ec
 8000b54:	200002a4 	.word	0x200002a4
 8000b58:	20000244 	.word	0x20000244
 8000b5c:	3a03126f 	.word	0x3a03126f
 8000b60:	20000198 	.word	0x20000198
 8000b64:	c60ca000 	.word	0xc60ca000
 8000b68:	460ca000 	.word	0x460ca000
 8000b6c:	43a50000 	.word	0x43a50000
 8000b70:	200001d4 	.word	0x200001d4
 8000b74:	c4798000 	.word	0xc4798000
 8000b78:	44798000 	.word	0x44798000
 8000b7c:	3df5c28f 	.word	0x3df5c28f
 8000b80:	2000020c 	.word	0x2000020c
 8000b84:	20000248 	.word	0x20000248
 8000b88:	20000600 	.word	0x20000600
 8000b8c:	43b40000 	.word	0x43b40000
 8000b90:	40010c00 	.word	0x40010c00
 8000b94:	40000400 	.word	0x40000400

08000b98 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	; 0x50
 8000b9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba2:	2228      	movs	r2, #40	; 0x28
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f008 fcfc 	bl	80095a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fc60 	bl	80034b4 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x66>
		Error_Handler();
 8000bfa:	f000 f827 	bl	8000c4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fecc 	bl	80039b8 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x92>
		Error_Handler();
 8000c26:	f000 f811 	bl	8000c4c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 f81b 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xac>
		Error_Handler();
 8000c40:	f000 f804 	bl	8000c4c <Error_Handler>
	}
}
 8000c44:	bf00      	nop
 8000c46:	3750      	adds	r7, #80	; 0x50
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>

08000c56 <pid_init>:
 *      Author: Kirs
 */

#include "pid_controller.h"
void pid_init(volatile PIDCONTROLLER *pid, float Kp, float Ki, float Kd,
		float Outmax, float Outmin, float dt) {
 8000c56:	b480      	push	{r7}
 8000c58:	b085      	sub	sp, #20
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	603b      	str	r3, [r7, #0]
	pid->Kp = Kp;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	61da      	str	r2, [r3, #28]
	pid->Ki = Ki;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	621a      	str	r2, [r3, #32]
	pid->Kd = Kd;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Outmax = Outmax;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
	pid->Outmin = Outmin;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
	pid->dt = dt;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6a3a      	ldr	r2, [r7, #32]
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
	pid->I = 0;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]

}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <pid_controller_calculation>:

void pid_controller_calculation(volatile PIDCONTROLLER *pid) {
 8000c9a:	b590      	push	{r4, r7, lr}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]

	pid->err = pid->setpoint - pid->feedback;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4619      	mov	r1, r3
 8000cac:	4610      	mov	r0, r2
 8000cae:	f7ff fa51 	bl	8000154 <__aeabi_fsub>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	609a      	str	r2, [r3, #8]

	// P составляющая
	pid->P = pid->err * pid->Kp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	f7ff fb4f 	bl	8000368 <__aeabi_fmul>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	611a      	str	r2, [r3, #16]

	// I составляющая
	if (pid->Ki) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a1b      	ldr	r3, [r3, #32]
 8000cd6:	f04f 0100 	mov.w	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fcd8 	bl	8000690 <__aeabi_fcmpeq>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d122      	bne.n	8000d2c <pid_controller_calculation+0x92>
		pid->I = pid->I + (pid->err + pid->Out - pid->I) * pid->dt;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695c      	ldr	r4, [r3, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	f7ff fa2f 	bl	8000158 <__addsf3>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4619      	mov	r1, r3
 8000d04:	4610      	mov	r0, r2
 8000d06:	f7ff fa25 	bl	8000154 <__aeabi_fsub>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4610      	mov	r0, r2
 8000d16:	f7ff fb27 	bl	8000368 <__aeabi_fmul>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fa1a 	bl	8000158 <__addsf3>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	615a      	str	r2, [r3, #20]
	}
	// D составляющая
	pid->D = (pid->err - pid->prevErr) / pid->dt;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4610      	mov	r0, r2
 8000d38:	f7ff fa0c 	bl	8000154 <__aeabi_fsub>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4610      	mov	r0, r2
 8000d48:	f7ff fbc2 	bl	80004d0 <__aeabi_fdiv>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	619a      	str	r2, [r3, #24]

	pid->Out = pid->P + pid->I * pid->Ki + pid->D;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691c      	ldr	r4, [r3, #16]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695a      	ldr	r2, [r3, #20]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4610      	mov	r0, r2
 8000d64:	f7ff fb00 	bl	8000368 <__aeabi_fmul>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff f9f3 	bl	8000158 <__addsf3>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	f7ff f9eb 	bl	8000158 <__addsf3>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c

	if (pid->Out > pid->Outmax) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4619      	mov	r1, r3
 8000d94:	4610      	mov	r0, r2
 8000d96:	f7ff fca3 	bl	80006e0 <__aeabi_fcmpgt>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <pid_controller_calculation+0x110>
		pid->Out = pid->Outmax;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da8:	e00e      	b.n	8000dc8 <pid_controller_calculation+0x12e>
	}
	else if (pid->Out < pid->Outmin) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	4619      	mov	r1, r3
 8000db4:	4610      	mov	r0, r2
 8000db6:	f7ff fc75 	bl	80006a4 <__aeabi_fcmplt>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <pid_controller_calculation+0x12e>
		pid->Out = pid->Outmin;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	pid->prevErr = pid->err;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	60da      	str	r2, [r3, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_MspInit+0x5c>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <HAL_MspInit+0x5c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6193      	str	r3, [r2, #24]
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_MspInit+0x5c>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x5c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_MspInit+0x5c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_MspInit+0x5c>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_MspInit+0x60>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_MspInit+0x60>)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	//P_angle.setpoint = (float)receive;
	update_speed(&Enc1);
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <SysTick_Handler+0x20>)
 8000e86:	f7ff fcf9 	bl	800087c <update_speed>
	countvar++;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SysTick_Handler+0x24>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3301      	adds	r3, #1
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <SysTick_Handler+0x24>)
 8000e96:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 fad8 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000198 	.word	0x20000198
 8000ea4:	2000024c 	.word	0x2000024c

08000ea8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eae:	f000 feb8 	bl	8001c22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20001004 	.word	0x20001004

08000ebc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	counter_tx++;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <TIM1_UP_IRQHandler+0x24>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <TIM1_UP_IRQHandler+0x24>)
 8000ecc:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS(messageBuffer, sizeof(messageBuffer));
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <TIM1_UP_IRQHandler+0x28>)
 8000ed2:	f007 ff65 	bl	8008da0 <CDC_Transmit_FS>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <TIM1_UP_IRQHandler+0x2c>)
 8000ed8:	f003 fa62 	bl	80043a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000024e 	.word	0x2000024e
 8000ee4:	20000258 	.word	0x20000258
 8000ee8:	2000025c 	.word	0x2000025c

08000eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eec:	b598      	push	{r3, r4, r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	counter++;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <TIM3_IRQHandler+0x64>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <TIM3_IRQHandler+0x64>)
 8000efa:	801a      	strh	r2, [r3, #0]
	update_position(&Enc1);
 8000efc:	4815      	ldr	r0, [pc, #84]	; (8000f54 <TIM3_IRQHandler+0x68>)
 8000efe:	f7ff fc3f 	bl	8000780 <update_position>
	pid_controller_calculation(&P_angle);
 8000f02:	4815      	ldr	r0, [pc, #84]	; (8000f58 <TIM3_IRQHandler+0x6c>)
 8000f04:	f7ff fec9 	bl	8000c9a <pid_controller_calculation>
	if (counter == 6) {
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <TIM3_IRQHandler+0x64>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	2b06      	cmp	r3, #6
 8000f0e:	d105      	bne.n	8000f1c <TIM3_IRQHandler+0x30>
		pid_controller_calculation(&PI_velocity);
 8000f10:	4812      	ldr	r0, [pc, #72]	; (8000f5c <TIM3_IRQHandler+0x70>)
 8000f12:	f7ff fec2 	bl	8000c9a <pid_controller_calculation>
		counter = 0;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <TIM3_IRQHandler+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	801a      	strh	r2, [r3, #0]
	}

	message = Enc1.angle_shaft + Enc1.turns * 360;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <TIM3_IRQHandler+0x68>)
 8000f1e:	685c      	ldr	r4, [r3, #4]
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <TIM3_IRQHandler+0x68>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	490e      	ldr	r1, [pc, #56]	; (8000f60 <TIM3_IRQHandler+0x74>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa1e 	bl	8000368 <__aeabi_fmul>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff f911 	bl	8000158 <__addsf3>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <TIM3_IRQHandler+0x78>)
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <TIM3_IRQHandler+0x78>)
 8000f40:	681b      	ldr	r3, [r3, #0]
	memcpy(messageBuffer, &message, sizeof(float));
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <TIM3_IRQHandler+0x7c>)
 8000f44:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <TIM3_IRQHandler+0x80>)
 8000f48:	f003 fa2a 	bl	80043a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd98      	pop	{r3, r4, r7, pc}
 8000f50:	20000250 	.word	0x20000250
 8000f54:	20000198 	.word	0x20000198
 8000f58:	200001d4 	.word	0x200001d4
 8000f5c:	2000020c 	.word	0x2000020c
 8000f60:	43b40000 	.word	0x43b40000
 8000f64:	20000254 	.word	0x20000254
 8000f68:	20000258 	.word	0x20000258
 8000f6c:	200002a4 	.word	0x200002a4

08000f70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM4_IRQHandler+0x10>)
 8000f76:	f003 fa13 	bl	80043a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200002ec 	.word	0x200002ec

08000f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b092      	sub	sp, #72	; 0x48
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f008 faf2 	bl	80095a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <MX_TIM1_Init+0xf8>)
 8000fc2:	4a32      	ldr	r2, [pc, #200]	; (800108c <MX_TIM1_Init+0xfc>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <MX_TIM1_Init+0xf8>)
 8000fc8:	2263      	movs	r2, #99	; 0x63
 8000fca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <MX_TIM1_Init+0xf8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_TIM1_Init+0xf8>)
 8000fd4:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000fd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_TIM1_Init+0xf8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_TIM1_Init+0xf8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <MX_TIM1_Init+0xf8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000fec:	4826      	ldr	r0, [pc, #152]	; (8001088 <MX_TIM1_Init+0xf8>)
 8000fee:	f002 ff47 	bl	8003e80 <HAL_TIM_OC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ff8:	f7ff fe28 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001008:	4619      	mov	r1, r3
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <MX_TIM1_Init+0xf8>)
 800100c:	f003 fe2a 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001016:	f7ff fe19 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <MX_TIM1_Init+0xf8>)
 8001040:	f003 fab6 	bl	80045b0 <HAL_TIM_OC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800104a:	f7ff fdff 	bl	8000c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM1_Init+0xf8>)
 8001072:	f003 fe55 	bl	8004d20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800107c:	f7ff fde6 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3748      	adds	r7, #72	; 0x48
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000025c 	.word	0x2000025c
 800108c:	40012c00 	.word	0x40012c00

08001090 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_TIM3_Init+0xac>)
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <MX_TIM3_Init+0xb0>)
 80010b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6-1;
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <MX_TIM3_Init+0xac>)
 80010ba:	2205      	movs	r2, #5
 80010bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_TIM3_Init+0xac>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_TIM3_Init+0xac>)
 80010c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_TIM3_Init+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM3_Init+0xac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <MX_TIM3_Init+0xac>)
 80010da:	f002 ff20 	bl	8003f1e <HAL_TIM_PWM_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010e4:	f7ff fdb2 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	; (800113c <MX_TIM3_Init+0xac>)
 80010f8:	f003 fdb4 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001102:	f7ff fda3 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	2360      	movs	r3, #96	; 0x60
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM3_Init+0xac>)
 800111e:	f003 faa3 	bl	8004668 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001128:	f7ff fd90 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM3_Init+0xac>)
 800112e:	f000 f8ef 	bl	8001310 <HAL_TIM_MspPostInit>

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002a4 	.word	0x200002a4
 8001140:	40000400 	.word	0x40000400

08001144 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2224      	movs	r2, #36	; 0x24
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f008 fa26 	bl	80095a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_TIM4_Init+0xa0>)
 8001162:	4a21      	ldr	r2, [pc, #132]	; (80011e8 <MX_TIM4_Init+0xa4>)
 8001164:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 22-1;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_TIM4_Init+0xa0>)
 8001168:	2215      	movs	r2, #21
 800116a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM4_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_TIM4_Init+0xa0>)
 8001174:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001178:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_TIM4_Init+0xa0>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM4_Init+0xa0>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001186:	2303      	movs	r3, #3
 8001188:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800118e:	2301      	movs	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800119e:	2301      	movs	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_TIM4_Init+0xa0>)
 80011b2:	f002 ffa5 	bl	8004100 <HAL_TIM_Encoder_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80011bc:	f7ff fd46 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_TIM4_Init+0xa0>)
 80011ce:	f003 fd49 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011d8:	f7ff fd38 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3730      	adds	r7, #48	; 0x30
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200002ec 	.word	0x200002ec
 80011e8:	40000800 	.word	0x40000800

080011ec <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_TIM_OC_MspInit+0x44>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d113      	bne.n	8001226 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_TIM_OC_MspInit+0x48>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_TIM_OC_MspInit+0x48>)
 8001204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_TIM_OC_MspInit+0x48>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2019      	movs	r0, #25
 800121c:	f000 fa09 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001220:	2019      	movs	r0, #25
 8001222:	f000 fa22 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012c00 	.word	0x40012c00
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_TIM_PWM_MspInit+0x44>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d113      	bne.n	8001272 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_TIM_PWM_MspInit+0x48>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <HAL_TIM_PWM_MspInit+0x48>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	61d3      	str	r3, [r2, #28]
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_TIM_PWM_MspInit+0x48>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	201d      	movs	r0, #29
 8001268:	f000 f9e3 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800126c:	201d      	movs	r0, #29
 800126e:	f000 f9fc 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40000400 	.word	0x40000400
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_TIM_Encoder_MspInit+0x80>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d12b      	bne.n	80012fc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_TIM_Encoder_MspInit+0x84>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_TIM_Encoder_MspInit+0x84>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	61d3      	str	r3, [r2, #28]
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_TIM_Encoder_MspInit+0x84>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_TIM_Encoder_MspInit+0x84>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_TIM_Encoder_MspInit+0x84>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_TIM_Encoder_MspInit+0x84>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d4:	23c0      	movs	r3, #192	; 0xc0
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <HAL_TIM_Encoder_MspInit+0x88>)
 80012e8:	f000 f9da 	bl	80016a0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	201e      	movs	r0, #30
 80012f2:	f000 f99e 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012f6:	201e      	movs	r0, #30
 80012f8:	f000 f9b7 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40000800 	.word	0x40000800
 8001308:	40021000 	.word	0x40021000
 800130c:	40010c00 	.word	0x40010c00

08001310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_TIM_MspPostInit+0x58>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d117      	bne.n	8001360 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_TIM_MspPostInit+0x5c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <HAL_TIM_MspPostInit+0x5c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_TIM_MspPostInit+0x5c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2302      	movs	r3, #2
 8001352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <HAL_TIM_MspPostInit+0x60>)
 800135c:	f000 f9a0 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40000400 	.word	0x40000400
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800

08001374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001374:	f7ff fe06 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800137a:	490c      	ldr	r1, [pc, #48]	; (80013ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001390:	4c09      	ldr	r4, [pc, #36]	; (80013b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f008 f8dd 	bl	800955c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a2:	f7ff fb27 	bl	80009f4 <main>
  bx lr
 80013a6:	4770      	bx	lr
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80013b0:	08009640 	.word	0x08009640
  ldr r2, =_sbss
 80013b4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80013b8:	20001514 	.word	0x20001514

080013bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC1_2_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_Init+0x28>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_Init+0x28>)
 80013ca:	f043 0310 	orr.w	r3, r3, #16
 80013ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f923 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	200f      	movs	r0, #15
 80013d8:	f000 f808 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff fcfc 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40022000 	.word	0x40022000

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f93b 	bl	8001686 <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f903 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000000 	.word	0x20000000
 8001444:	20000008 	.word	0x20000008
 8001448:	20000004 	.word	0x20000004

0800144c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x1c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x20>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a03      	ldr	r2, [pc, #12]	; (800146c <HAL_IncTick+0x20>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	20000008 	.word	0x20000008
 800146c:	20000334 	.word	0x20000334

08001470 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <HAL_GetTick+0x10>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000334 	.word	0x20000334

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <__NVIC_EnableIRQ+0x34>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff90 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff2d 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff42 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff35 	bl	80014e8 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b08b      	sub	sp, #44	; 0x2c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e169      	b.n	8001988 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b4:	2201      	movs	r2, #1
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8158 	bne.w	8001982 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a9a      	ldr	r2, [pc, #616]	; (8001940 <HAL_GPIO_Init+0x2a0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d05e      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 80016dc:	4a98      	ldr	r2, [pc, #608]	; (8001940 <HAL_GPIO_Init+0x2a0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d875      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 80016e2:	4a98      	ldr	r2, [pc, #608]	; (8001944 <HAL_GPIO_Init+0x2a4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d058      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 80016e8:	4a96      	ldr	r2, [pc, #600]	; (8001944 <HAL_GPIO_Init+0x2a4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d86f      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 80016ee:	4a96      	ldr	r2, [pc, #600]	; (8001948 <HAL_GPIO_Init+0x2a8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d052      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 80016f4:	4a94      	ldr	r2, [pc, #592]	; (8001948 <HAL_GPIO_Init+0x2a8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d869      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 80016fa:	4a94      	ldr	r2, [pc, #592]	; (800194c <HAL_GPIO_Init+0x2ac>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d04c      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 8001700:	4a92      	ldr	r2, [pc, #584]	; (800194c <HAL_GPIO_Init+0x2ac>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d863      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 8001706:	4a92      	ldr	r2, [pc, #584]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d046      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 800170c:	4a90      	ldr	r2, [pc, #576]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d85d      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 8001712:	2b12      	cmp	r3, #18
 8001714:	d82a      	bhi.n	800176c <HAL_GPIO_Init+0xcc>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d859      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <HAL_GPIO_Init+0x80>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	0800179b 	.word	0x0800179b
 8001724:	08001775 	.word	0x08001775
 8001728:	08001787 	.word	0x08001787
 800172c:	080017c9 	.word	0x080017c9
 8001730:	080017cf 	.word	0x080017cf
 8001734:	080017cf 	.word	0x080017cf
 8001738:	080017cf 	.word	0x080017cf
 800173c:	080017cf 	.word	0x080017cf
 8001740:	080017cf 	.word	0x080017cf
 8001744:	080017cf 	.word	0x080017cf
 8001748:	080017cf 	.word	0x080017cf
 800174c:	080017cf 	.word	0x080017cf
 8001750:	080017cf 	.word	0x080017cf
 8001754:	080017cf 	.word	0x080017cf
 8001758:	080017cf 	.word	0x080017cf
 800175c:	080017cf 	.word	0x080017cf
 8001760:	080017cf 	.word	0x080017cf
 8001764:	0800177d 	.word	0x0800177d
 8001768:	08001791 	.word	0x08001791
 800176c:	4a79      	ldr	r2, [pc, #484]	; (8001954 <HAL_GPIO_Init+0x2b4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001772:	e02c      	b.n	80017ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e029      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	3304      	adds	r3, #4
 8001782:	623b      	str	r3, [r7, #32]
          break;
 8001784:	e024      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	3308      	adds	r3, #8
 800178c:	623b      	str	r3, [r7, #32]
          break;
 800178e:	e01f      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	330c      	adds	r3, #12
 8001796:	623b      	str	r3, [r7, #32]
          break;
 8001798:	e01a      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a2:	2304      	movs	r3, #4
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e013      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d105      	bne.n	80017bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b0:	2308      	movs	r3, #8
 80017b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	611a      	str	r2, [r3, #16]
          break;
 80017ba:	e009      	b.n	80017d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017bc:	2308      	movs	r3, #8
 80017be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	615a      	str	r2, [r3, #20]
          break;
 80017c6:	e003      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          break;
 80017ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2bff      	cmp	r3, #255	; 0xff
 80017d4:	d801      	bhi.n	80017da <HAL_GPIO_Init+0x13a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	e001      	b.n	80017de <HAL_GPIO_Init+0x13e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3304      	adds	r3, #4
 80017de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2bff      	cmp	r3, #255	; 0xff
 80017e4:	d802      	bhi.n	80017ec <HAL_GPIO_Init+0x14c>
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	e002      	b.n	80017f2 <HAL_GPIO_Init+0x152>
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	3b08      	subs	r3, #8
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	210f      	movs	r1, #15
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	6a39      	ldr	r1, [r7, #32]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	431a      	orrs	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80b1 	beq.w	8001982 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001820:	4b4d      	ldr	r3, [pc, #308]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a4c      	ldr	r2, [pc, #304]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_GPIO_Init+0x2bc>)
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	220f      	movs	r2, #15
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a40      	ldr	r2, [pc, #256]	; (8001960 <HAL_GPIO_Init+0x2c0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d013      	beq.n	800188c <HAL_GPIO_Init+0x1ec>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3f      	ldr	r2, [pc, #252]	; (8001964 <HAL_GPIO_Init+0x2c4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00d      	beq.n	8001888 <HAL_GPIO_Init+0x1e8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3e      	ldr	r2, [pc, #248]	; (8001968 <HAL_GPIO_Init+0x2c8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d007      	beq.n	8001884 <HAL_GPIO_Init+0x1e4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3d      	ldr	r2, [pc, #244]	; (800196c <HAL_GPIO_Init+0x2cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_GPIO_Init+0x1e0>
 800187c:	2303      	movs	r3, #3
 800187e:	e006      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001880:	2304      	movs	r3, #4
 8001882:	e004      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001884:	2302      	movs	r3, #2
 8001886:	e002      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 800188c:	2300      	movs	r3, #0
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	f002 0203 	and.w	r2, r2, #3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4093      	lsls	r3, r2
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800189e:	492f      	ldr	r1, [pc, #188]	; (800195c <HAL_GPIO_Init+0x2bc>)
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	492c      	ldr	r1, [pc, #176]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4928      	ldr	r1, [pc, #160]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4922      	ldr	r1, [pc, #136]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	491e      	ldr	r1, [pc, #120]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4918      	ldr	r1, [pc, #96]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	4914      	ldr	r1, [pc, #80]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 8001920:	4013      	ands	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d021      	beq.n	8001974 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_GPIO_Init+0x2d0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e021      	b.n	8001982 <HAL_GPIO_Init+0x2e2>
 800193e:	bf00      	nop
 8001940:	10320000 	.word	0x10320000
 8001944:	10310000 	.word	0x10310000
 8001948:	10220000 	.word	0x10220000
 800194c:	10210000 	.word	0x10210000
 8001950:	10120000 	.word	0x10120000
 8001954:	10110000 	.word	0x10110000
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	40010800 	.word	0x40010800
 8001964:	40010c00 	.word	0x40010c00
 8001968:	40011000 	.word	0x40011000
 800196c:	40011400 	.word	0x40011400
 8001970:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_GPIO_Init+0x304>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	43db      	mvns	r3, r3
 800197c:	4909      	ldr	r1, [pc, #36]	; (80019a4 <HAL_GPIO_Init+0x304>)
 800197e:	4013      	ands	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	3301      	adds	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	f47f ae8e 	bne.w	80016b4 <HAL_GPIO_Init+0x14>
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	372c      	adds	r7, #44	; 0x2c
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019c4:	e003      	b.n	80019ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	611a      	str	r2, [r3, #16]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	b08b      	sub	sp, #44	; 0x2c
 80019dc:	af06      	add	r7, sp, #24
 80019de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0f1      	b.n	8001bce <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f007 fb02 	bl	8009008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2203      	movs	r2, #3
 8001a08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fa0e 	bl	8004e32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	687e      	ldr	r6, [r7, #4]
 8001a1e:	466d      	mov	r5, sp
 8001a20:	f106 0410 	add.w	r4, r6, #16
 8001a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	602b      	str	r3, [r5, #0]
 8001a2c:	1d33      	adds	r3, r6, #4
 8001a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a30:	6838      	ldr	r0, [r7, #0]
 8001a32:	f003 f9d8 	bl	8004de6 <USB_CoreInit>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0c2      	b.n	8001bce <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fa09 	bl	8004e66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e040      	b.n	8001adc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	3303      	adds	r3, #3
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3338      	adds	r3, #56	; 0x38
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	333c      	adds	r3, #60	; 0x3c
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	440b      	add	r3, r1
 8001ad0:	3340      	adds	r3, #64	; 0x40
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3b9      	bcc.n	8001a5a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e044      	b.n	8001b76 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	3301      	adds	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3b5      	bcc.n	8001aec <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	687e      	ldr	r6, [r7, #4]
 8001b88:	466d      	mov	r5, sp
 8001b8a:	f106 0410 	add.w	r4, r6, #16
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	602b      	str	r3, [r5, #0]
 8001b96:	1d33      	adds	r3, r6, #4
 8001b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9a:	6838      	ldr	r0, [r7, #0]
 8001b9c:	f003 f96f 	bl	8004e7e <USB_DevInit>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00d      	b.n	8001bce <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 fbf1 	bl	80073ae <USB_DevDisconnect>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_PCD_Start+0x16>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e016      	b.n	8001c1a <HAL_PCD_Start+0x44>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 f904 	bl	8004e06 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bfe:	2101      	movs	r1, #1
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f007 fc74 	bl	80094ee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fbc5 	bl	800739a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b088      	sub	sp, #32
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fbc7 	bl	80073c2 <USB_ReadInterrupts>
 8001c34:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fb1b 	bl	800227c <PCD_EP_ISR_Handler>

    return;
 8001c46:	e119      	b.n	8001e7c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d013      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c64:	b292      	uxth	r2, r2
 8001c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f007 fa47 	bl	80090fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c70:	2100      	movs	r1, #0
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f905 	bl	8001e82 <HAL_PCD_SetAddress>

    return;
 8001c78:	e100      	b.n	8001e7c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00c      	beq.n	8001c9e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c96:	b292      	uxth	r2, r2
 8001c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c9c:	e0ee      	b.n	8001e7c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001cc0:	e0dc      	b.n	8001e7c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d027      	beq.n	8001d1c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0204 	bic.w	r2, r2, #4
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0208 	bic.w	r2, r2, #8
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f007 fa37 	bl	8009170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d14:	b292      	uxth	r2, r2
 8001d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d1a:	e0af      	b.n	8001e7c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8083 	beq.w	8001e2e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	77fb      	strb	r3, [r7, #31]
 8001d2c:	e010      	b.n	8001d50 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	7ffb      	ldrb	r3, [r7, #31]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	441a      	add	r2, r3
 8001d3a:	7ffb      	ldrb	r3, [r7, #31]
 8001d3c:	8812      	ldrh	r2, [r2, #0]
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	3320      	adds	r3, #32
 8001d44:	443b      	add	r3, r7
 8001d46:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	77fb      	strb	r3, [r7, #31]
 8001d50:	7ffb      	ldrb	r3, [r7, #31]
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	d9eb      	bls.n	8001d2e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	b292      	uxth	r2, r2
 8001d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d86:	bf00      	nop
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f6      	beq.n	8001d88 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	77fb      	strb	r3, [r7, #31]
 8001db6:	e00f      	b.n	8001dd8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	7ffa      	ldrb	r2, [r7, #31]
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	440a      	add	r2, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	3320      	adds	r3, #32
 8001dca:	443b      	add	r3, r7
 8001dcc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001dd0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001dd2:	7ffb      	ldrb	r3, [r7, #31]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
 8001dd8:	7ffb      	ldrb	r3, [r7, #31]
 8001dda:	2b07      	cmp	r3, #7
 8001ddc:	d9ec      	bls.n	8001db8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0208 	orr.w	r2, r2, #8
 8001df0:	b292      	uxth	r2, r2
 8001df2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e08:	b292      	uxth	r2, r2
 8001e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0204 	orr.w	r2, r2, #4
 8001e20:	b292      	uxth	r2, r2
 8001e22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f007 f988 	bl	800913c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e2c:	e026      	b.n	8001e7c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00f      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f007 f946 	bl	80090e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e56:	e011      	b.n	8001e7c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e74:	b292      	uxth	r2, r2
 8001e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e7a:	bf00      	nop
  }
}
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_PCD_SetAddress+0x1a>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e013      	b.n	8001ec4 <HAL_PCD_SetAddress+0x42>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f005 fa5d 	bl	8007374 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	70fb      	strb	r3, [r7, #3]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	803b      	strh	r3, [r7, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0e      	bge.n	8001f10 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
 8001f0e:	e00e      	b.n	8001f2e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 0207 	and.w	r2, r3, #7
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f3a:	883a      	ldrh	r2, [r7, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	78ba      	ldrb	r2, [r7, #2]
 8001f44:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f46:	78bb      	ldrb	r3, [r7, #2]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d102      	bne.n	8001f52 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_EP_Open+0x94>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e00e      	b.n	8001f7e <HAL_PCD_EP_Open+0xb2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 ffa6 	bl	8004ec0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da0e      	bge.n	8001fb8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	705a      	strb	r2, [r3, #1]
 8001fb6:	e00e      	b.n	8001fd6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 0207 	and.w	r2, r3, #7
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_PCD_EP_Close+0x6a>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e00e      	b.n	800200e <HAL_PCD_EP_Close+0x88>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fb1e 	bl	8005640 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	460b      	mov	r3, r1
 8002024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002026:	7afb      	ldrb	r3, [r7, #11]
 8002028:	f003 0207 	and.w	r2, r3, #7
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	b2da      	uxtb	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6979      	ldr	r1, [r7, #20]
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fcd5 	bl	8005a18 <USB_EPStartXfer>

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 0207 	and.w	r2, r3, #7
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	460b      	mov	r3, r1
 80020b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4413      	add	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2201      	movs	r2, #1
 80020f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6979      	ldr	r1, [r7, #20]
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fc87 	bl	8005a18 <USB_EPStartXfer>

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0207 	and.w	r2, r3, #7
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	d901      	bls.n	8002132 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e04c      	b.n	80021cc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002136:	2b00      	cmp	r3, #0
 8002138:	da0e      	bge.n	8002158 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	705a      	strb	r2, [r3, #1]
 8002156:	e00c      	b.n	8002172 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	b2da      	uxtb	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_PCD_EP_SetStall+0x7e>
 800218e:	2302      	movs	r3, #2
 8002190:	e01c      	b.n	80021cc <HAL_PCD_EP_SetStall+0xb8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68f9      	ldr	r1, [r7, #12]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 ffea 	bl	800717a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d108      	bne.n	80021c2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f005 f90f 	bl	80073e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	f003 020f 	and.w	r2, r3, #15
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d901      	bls.n	80021f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e040      	b.n	8002274 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da0e      	bge.n	8002218 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	705a      	strb	r2, [r3, #1]
 8002216:	e00e      	b.n	8002236 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	f003 0207 	and.w	r2, r3, #7
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	b2da      	uxtb	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_PCD_EP_ClrStall+0x82>
 8002252:	2302      	movs	r3, #2
 8002254:	e00e      	b.n	8002274 <HAL_PCD_EP_ClrStall+0xa0>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 ffd8 	bl	800721a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b096      	sub	sp, #88	; 0x58
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002284:	e3bf      	b.n	8002a06 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800228e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80022a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 8179 	bne.w	800259c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d152      	bne.n	800235c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c6:	81fb      	strh	r3, [r7, #14]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	89fb      	ldrh	r3, [r7, #14]
 80022ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3328      	adds	r3, #40	; 0x28
 80022de:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	3302      	adds	r3, #2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800230c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	441a      	add	r2, r3
 8002316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002318:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800231a:	2100      	movs	r1, #0
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f006 fec6 	bl	80090ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 836b 	beq.w	8002a06 <PCD_EP_ISR_Handler+0x78a>
 8002330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 8366 	bne.w	8002a06 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002346:	b2da      	uxtb	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b292      	uxth	r2, r2
 800234e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800235a:	e354      	b.n	8002a06 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002362:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800236e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002376:	2b00      	cmp	r3, #0
 8002378:	d034      	beq.n	80023e4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	3306      	adds	r3, #6
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80023b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f005 f861 	bl	8007480 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023ca:	4013      	ands	r3, r2
 80023cc:	823b      	strh	r3, [r7, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	8a3a      	ldrh	r2, [r7, #16]
 80023d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d8:	b292      	uxth	r2, r2
 80023da:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f006 fe39 	bl	8009054 <HAL_PCD_SetupStageCallback>
 80023e2:	e310      	b.n	8002a06 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023e4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f280 830c 	bge.w	8002a06 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023fa:	4013      	ands	r3, r2
 80023fc:	83fb      	strh	r3, [r7, #30]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	8bfa      	ldrh	r2, [r7, #30]
 8002404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002408:	b292      	uxth	r2, r2
 800240a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002414:	b29b      	uxth	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	3306      	adds	r3, #6
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	4413      	add	r3, r2
 800242a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002436:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d019      	beq.n	8002474 <PCD_EP_ISR_Handler+0x1f8>
 8002440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244e:	6959      	ldr	r1, [r3, #20]
 8002450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002452:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002456:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002458:	b29b      	uxth	r3, r3
 800245a:	f005 f811 	bl	8007480 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	441a      	add	r2, r3
 8002468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f006 fe02 	bl	8009078 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800247e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 82bd 	bne.w	8002a06 <PCD_EP_ISR_Handler+0x78a>
 800248c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002490:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002498:	f000 82b5 	beq.w	8002a06 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4413      	add	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	801a      	strh	r2, [r3, #0]
 80024cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b3e      	cmp	r3, #62	; 0x3e
 80024d2:	d91d      	bls.n	8002510 <PCD_EP_ISR_Handler+0x294>
 80024d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
 80024dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <PCD_EP_ISR_Handler+0x272>
 80024e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ea:	3b01      	subs	r3, #1
 80024ec:	647b      	str	r3, [r7, #68]	; 0x44
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002508:	b29a      	uxth	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	e026      	b.n	800255e <PCD_EP_ISR_Handler+0x2e2>
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <PCD_EP_ISR_Handler+0x2b2>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002526:	b29a      	uxth	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	e017      	b.n	800255e <PCD_EP_ISR_Handler+0x2e2>
 800252e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	647b      	str	r3, [r7, #68]	; 0x44
 8002536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <PCD_EP_ISR_Handler+0x2cc>
 8002542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002544:	3301      	adds	r3, #1
 8002546:	647b      	str	r3, [r7, #68]	; 0x44
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29a      	uxth	r2, r3
 800254e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002550:	b29b      	uxth	r3, r3
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	b29b      	uxth	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b29a      	uxth	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800256a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256e:	827b      	strh	r3, [r7, #18]
 8002570:	8a7b      	ldrh	r3, [r7, #18]
 8002572:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002576:	827b      	strh	r3, [r7, #18]
 8002578:	8a7b      	ldrh	r3, [r7, #18]
 800257a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800257e:	827b      	strh	r3, [r7, #18]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	8a7b      	ldrh	r3, [r7, #18]
 8002586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800258e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002596:	b29b      	uxth	r3, r3
 8002598:	8013      	strh	r3, [r2, #0]
 800259a:	e234      	b.n	8002a06 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025b0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f280 80fc 	bge.w	80027b2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d0:	4013      	ands	r3, r2
 80025d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80025e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ec:	b292      	uxth	r2, r2
 80025ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025f0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	7b1b      	ldrb	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d125      	bne.n	800265a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	3306      	adds	r3, #6
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002636:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800263a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8092 	beq.w	8002768 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264a:	6959      	ldr	r1, [r3, #20]
 800264c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264e:	88da      	ldrh	r2, [r3, #6]
 8002650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002654:	f004 ff14 	bl	8007480 <USB_ReadPMA>
 8002658:	e086      	b.n	8002768 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	78db      	ldrb	r3, [r3, #3]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d10a      	bne.n	8002678 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002662:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002666:	461a      	mov	r2, r3
 8002668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f9d9 	bl	8002a22 <HAL_PCD_EP_DB_Receive>
 8002670:	4603      	mov	r3, r0
 8002672:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002676:	e077      	b.n	8002768 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002692:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	441a      	add	r2, r3
 80026a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d024      	beq.n	8002720 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	3302      	adds	r3, #2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002706:	2b00      	cmp	r3, #0
 8002708:	d02e      	beq.n	8002768 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	6959      	ldr	r1, [r3, #20]
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	891a      	ldrh	r2, [r3, #8]
 8002716:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800271a:	f004 feb1 	bl	8007480 <USB_ReadPMA>
 800271e:	e023      	b.n	8002768 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	3306      	adds	r3, #6
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002748:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800274c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275a:	6959      	ldr	r1, [r3, #20]
 800275c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275e:	895a      	ldrh	r2, [r3, #10]
 8002760:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002764:	f004 fe8c 	bl	8007480 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002770:	441a      	add	r2, r3
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800277e:	441a      	add	r2, r3
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <PCD_EP_ISR_Handler+0x51c>
 800278c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d206      	bcs.n	80027a6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f006 fc6a 	bl	8009078 <HAL_PCD_DataOutStageCallback>
 80027a4:	e005      	b.n	80027b2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 f933 	bl	8005a18 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8123 	beq.w	8002a06 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80027c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	441a      	add	r2, r3
 8002800:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800280c:	b29b      	uxth	r3, r3
 800280e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002812:	78db      	ldrb	r3, [r3, #3]
 8002814:	2b01      	cmp	r3, #1
 8002816:	f040 80a2 	bne.w	800295e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800281a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	7b1b      	ldrb	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8093 	beq.w	8002950 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800282a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d046      	beq.n	80028c4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d126      	bne.n	800288c <PCD_EP_ISR_Handler+0x610>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284c:	b29b      	uxth	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	4413      	add	r3, r2
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	011a      	lsls	r2, r3, #4
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	4413      	add	r3, r2
 8002860:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002870:	b29a      	uxth	r2, r3
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	801a      	strh	r2, [r3, #0]
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002884:	b29a      	uxth	r2, r3
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e061      	b.n	8002950 <PCD_EP_ISR_Handler+0x6d4>
 800288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d15d      	bne.n	8002950 <PCD_EP_ISR_Handler+0x6d4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a8:	4413      	add	r3, r2
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	011a      	lsls	r2, r3, #4
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	2200      	movs	r2, #0
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	e045      	b.n	8002950 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d126      	bne.n	8002920 <PCD_EP_ISR_Handler+0x6a4>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	4413      	add	r3, r2
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	011a      	lsls	r2, r3, #4
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	4413      	add	r3, r2
 80028f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002904:	b29a      	uxth	r2, r3
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	801a      	strh	r2, [r3, #0]
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002918:	b29a      	uxth	r2, r3
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	801a      	strh	r2, [r3, #0]
 800291e:	e017      	b.n	8002950 <PCD_EP_ISR_Handler+0x6d4>
 8002920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d113      	bne.n	8002950 <PCD_EP_ISR_Handler+0x6d4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002936:	4413      	add	r3, r2
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	011a      	lsls	r2, r3, #4
 8002940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002942:	4413      	add	r3, r2
 8002944:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
 800294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294c:	2200      	movs	r2, #0
 800294e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f006 fba9 	bl	80090ae <HAL_PCD_DataInStageCallback>
 800295c:	e053      	b.n	8002a06 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800295e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d146      	bne.n	80029f8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	3302      	adds	r3, #2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002992:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800299e:	429a      	cmp	r2, r3
 80029a0:	d907      	bls.n	80029b2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80029a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	e002      	b.n	80029b8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80029b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f006 fb71 	bl	80090ae <HAL_PCD_DataInStageCallback>
 80029cc:	e01b      	b.n	8002a06 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029d6:	441a      	add	r2, r3
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029da:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80029dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029de:	69da      	ldr	r2, [r3, #28]
 80029e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029e4:	441a      	add	r2, r3
 80029e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 f811 	bl	8005a18 <USB_EPStartXfer>
 80029f6:	e006      	b.n	8002a06 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029fc:	461a      	mov	r2, r3
 80029fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f91b 	bl	8002c3c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f6ff ac37 	blt.w	8002286 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3758      	adds	r7, #88	; 0x58
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d07e      	beq.n	8002b38 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a62:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	8b7b      	ldrh	r3, [r7, #26]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d306      	bcc.n	8002a7c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	8b7b      	ldrh	r3, [r7, #26]
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	619a      	str	r2, [r3, #24]
 8002a7a:	e002      	b.n	8002a82 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d123      	bne.n	8002ad2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa4:	833b      	strh	r3, [r7, #24]
 8002aa6:	8b3b      	ldrh	r3, [r7, #24]
 8002aa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002aac:	833b      	strh	r3, [r7, #24]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	441a      	add	r2, r3
 8002abc:	8b3b      	ldrh	r3, [r7, #24]
 8002abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01f      	beq.n	8002b1c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af6:	82fb      	strh	r3, [r7, #22]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	8afb      	ldrh	r3, [r7, #22]
 8002b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b1c:	8b7b      	ldrh	r3, [r7, #26]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8087 	beq.w	8002c32 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6959      	ldr	r1, [r3, #20]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	891a      	ldrh	r2, [r3, #8]
 8002b30:	8b7b      	ldrh	r3, [r7, #26]
 8002b32:	f004 fca5 	bl	8007480 <USB_ReadPMA>
 8002b36:	e07c      	b.n	8002c32 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3306      	adds	r3, #6
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	8b7b      	ldrh	r3, [r7, #26]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d306      	bcc.n	8002b7a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	8b7b      	ldrh	r3, [r7, #26]
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	619a      	str	r2, [r3, #24]
 8002b78:	e002      	b.n	8002b80 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d123      	bne.n	8002bd0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	83fb      	strh	r3, [r7, #30]
 8002ba4:	8bfb      	ldrh	r3, [r7, #30]
 8002ba6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002baa:	83fb      	strh	r3, [r7, #30]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	8bfb      	ldrh	r3, [r7, #30]
 8002bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11f      	bne.n	8002c1a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	83bb      	strh	r3, [r7, #28]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	441a      	add	r2, r3
 8002c04:	8bbb      	ldrh	r3, [r7, #28]
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c1a:	8b7b      	ldrh	r3, [r7, #26]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	6959      	ldr	r1, [r3, #20]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	895a      	ldrh	r2, [r3, #10]
 8002c2c:	8b7b      	ldrh	r3, [r7, #26]
 8002c2e:	f004 fc27 	bl	8007480 <USB_ReadPMA>
    }
  }

  return count;
 8002c32:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b0a4      	sub	sp, #144	; 0x90
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 81dd 	beq.w	8003010 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d907      	bls.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	619a      	str	r2, [r3, #24]
 8002c9c:	e002      	b.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 80b9 	bne.w	8002e20 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d126      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	4413      	add	r3, r2
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	011a      	lsls	r2, r3, #4
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	801a      	strh	r2, [r3, #0]
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	e01a      	b.n	8002d3a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	785b      	ldrb	r3, [r3, #1]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d116      	bne.n	8002d3a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	4413      	add	r3, r2
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	011a      	lsls	r2, r3, #4
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d126      	bne.n	8002d96 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	011a      	lsls	r2, r3, #4
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	e017      	b.n	8002dc6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	785b      	ldrb	r3, [r3, #1]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d113      	bne.n	8002dc6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	4413      	add	r3, r2
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	011a      	lsls	r2, r3, #4
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	4413      	add	r3, r2
 8002dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dbe:	623b      	str	r3, [r7, #32]
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f006 f96e 	bl	80090ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 82fc 	beq.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df8:	82fb      	strh	r3, [r7, #22]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	8afb      	ldrh	r3, [r7, #22]
 8002e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	8013      	strh	r3, [r2, #0]
 8002e1e:	e2da      	b.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d021      	beq.n	8002e6e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f040 82ae 	bne.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e82:	441a      	add	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e90:	441a      	add	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d30b      	bcc.n	8002eba <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eb2:	1ad2      	subs	r2, r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	621a      	str	r2, [r3, #32]
 8002eb8:	e017      	b.n	8002eea <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d108      	bne.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002ec2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ed2:	e00a      	b.n	8002eea <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d165      	bne.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x382>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f06:	4413      	add	r3, r2
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	011a      	lsls	r2, r3, #4
 8002f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f30:	d91d      	bls.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x332>
 8002f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x310>
 8002f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	e044      	b.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x350>
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	801a      	strh	r2, [r3, #0]
 8002f8a:	e035      	b.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	029b      	lsls	r3, r3, #10
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	801a      	strh	r2, [r3, #0]
 8002fbc:	e01c      	b.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d118      	bne.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	647b      	str	r3, [r7, #68]	; 0x44
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fda:	4413      	add	r3, r2
 8002fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	011a      	lsls	r2, r3, #4
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fec:	643b      	str	r3, [r7, #64]	; 0x40
 8002fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6959      	ldr	r1, [r3, #20]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	891a      	ldrh	r2, [r3, #8]
 8003004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003008:	b29b      	uxth	r3, r3
 800300a:	f004 f9f4 	bl	80073f6 <USB_WritePMA>
 800300e:	e1e2      	b.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003018:	b29b      	uxth	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	3306      	adds	r3, #6
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003038:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003044:	429a      	cmp	r2, r3
 8003046:	d307      	bcc.n	8003058 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003050:	1ad2      	subs	r2, r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	619a      	str	r2, [r3, #24]
 8003056:	e002      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 80c0 	bne.w	80031e8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d126      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x482>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003084:	4413      	add	r3, r2
 8003086:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	011a      	lsls	r2, r3, #4
 800308e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003090:	4413      	add	r3, r2
 8003092:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003096:	67bb      	str	r3, [r7, #120]	; 0x78
 8003098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e01a      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d116      	bne.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	667b      	str	r3, [r7, #100]	; 0x64
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030da:	4413      	add	r3, r2
 80030dc:	667b      	str	r3, [r7, #100]	; 0x64
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	011a      	lsls	r2, r3, #4
 80030e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030e6:	4413      	add	r3, r2
 80030e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ec:	663b      	str	r3, [r7, #96]	; 0x60
 80030ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030f0:	2200      	movs	r2, #0
 80030f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	677b      	str	r3, [r7, #116]	; 0x74
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d12b      	bne.n	800315a <HAL_PCD_EP_DB_Transmit+0x51e>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003116:	4413      	add	r3, r2
 8003118:	66fb      	str	r3, [r7, #108]	; 0x6c
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	011a      	lsls	r2, r3, #4
 8003120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003122:	4413      	add	r3, r2
 8003124:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800312c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003138:	b29a      	uxth	r2, r3
 800313a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800313e:	801a      	strh	r2, [r3, #0]
 8003140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003150:	b29a      	uxth	r2, r3
 8003152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003156:	801a      	strh	r2, [r3, #0]
 8003158:	e017      	b.n	800318a <HAL_PCD_EP_DB_Transmit+0x54e>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d113      	bne.n	800318a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003170:	4413      	add	r3, r2
 8003172:	677b      	str	r3, [r7, #116]	; 0x74
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	011a      	lsls	r2, r3, #4
 800317a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317c:	4413      	add	r3, r2
 800317e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003182:	673b      	str	r3, [r7, #112]	; 0x70
 8003184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003186:	2200      	movs	r2, #0
 8003188:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f005 ff8c 	bl	80090ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 811a 	bne.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	8013      	strh	r3, [r2, #0]
 80031e6:	e0f6      	b.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d121      	bne.n	8003236 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	b29b      	uxth	r3, r3
 8003234:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 80ca 	bne.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800324a:	441a      	add	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003258:	441a      	add	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	429a      	cmp	r2, r3
 8003268:	d30b      	bcc.n	8003282 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327a:	1ad2      	subs	r2, r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	621a      	str	r2, [r3, #32]
 8003280:	e017      	b.n	80032b2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800328a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800328e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800329a:	e00a      	b.n	80032b2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	657b      	str	r3, [r7, #84]	; 0x54
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d165      	bne.n	800338c <HAL_PCD_EP_DB_Transmit+0x750>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d4:	4413      	add	r3, r2
 80032d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	011a      	lsls	r2, r3, #4
 80032de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e0:	4413      	add	r3, r2
 80032e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80032e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032fc:	2b3e      	cmp	r3, #62	; 0x3e
 80032fe:	d91d      	bls.n	800333c <HAL_PCD_EP_DB_Transmit+0x700>
 8003300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	66bb      	str	r3, [r7, #104]	; 0x68
 8003308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <HAL_PCD_EP_DB_Transmit+0x6de>
 8003314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003316:	3b01      	subs	r3, #1
 8003318:	66bb      	str	r3, [r7, #104]	; 0x68
 800331a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29a      	uxth	r2, r3
 8003320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003322:	b29b      	uxth	r3, r3
 8003324:	029b      	lsls	r3, r3, #10
 8003326:	b29b      	uxth	r3, r3
 8003328:	4313      	orrs	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003334:	b29a      	uxth	r2, r3
 8003336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e041      	b.n	80033c0 <HAL_PCD_EP_DB_Transmit+0x784>
 800333c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_PCD_EP_DB_Transmit+0x71e>
 8003344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003352:	b29a      	uxth	r2, r3
 8003354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	e032      	b.n	80033c0 <HAL_PCD_EP_DB_Transmit+0x784>
 800335a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	66bb      	str	r3, [r7, #104]	; 0x68
 8003362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_PCD_EP_DB_Transmit+0x738>
 800336e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003370:	3301      	adds	r3, #1
 8003372:	66bb      	str	r3, [r7, #104]	; 0x68
 8003374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800337c:	b29b      	uxth	r3, r3
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	b29b      	uxth	r3, r3
 8003382:	4313      	orrs	r3, r2
 8003384:	b29a      	uxth	r2, r3
 8003386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	e019      	b.n	80033c0 <HAL_PCD_EP_DB_Transmit+0x784>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d115      	bne.n	80033c0 <HAL_PCD_EP_DB_Transmit+0x784>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800339c:	b29b      	uxth	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a2:	4413      	add	r3, r2
 80033a4:	657b      	str	r3, [r7, #84]	; 0x54
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	011a      	lsls	r2, r3, #4
 80033ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ae:	4413      	add	r3, r2
 80033b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033b4:	653b      	str	r3, [r7, #80]	; 0x50
 80033b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033be:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	6959      	ldr	r1, [r3, #20]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	895a      	ldrh	r2, [r3, #10]
 80033cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f004 f810 	bl	80073f6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f0:	82bb      	strh	r3, [r7, #20]
 80033f2:	8abb      	ldrh	r3, [r7, #20]
 80033f4:	f083 0310 	eor.w	r3, r3, #16
 80033f8:	82bb      	strh	r3, [r7, #20]
 80033fa:	8abb      	ldrh	r3, [r7, #20]
 80033fc:	f083 0320 	eor.w	r3, r3, #32
 8003400:	82bb      	strh	r3, [r7, #20]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	8abb      	ldrh	r3, [r7, #20]
 8003412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003422:	b29b      	uxth	r3, r3
 8003424:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3790      	adds	r7, #144	; 0x90
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	4613      	mov	r3, r2
 8003440:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e009      	b.n	800347a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003466:	897a      	ldrh	r2, [r7, #10]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800347a:	893b      	ldrh	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	b29a      	uxth	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	80da      	strh	r2, [r3, #6]
 800348e:	e00b      	b.n	80034a8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2201      	movs	r2, #1
 8003494:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	b29a      	uxth	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e272      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8087 	beq.w	80035e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d4:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d00c      	beq.n	80034fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e0:	4b8f      	ldr	r3, [pc, #572]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d112      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
 80034ec:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d10b      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fa:	4b89      	ldr	r3, [pc, #548]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x12c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d168      	bne.n	80035e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e24c      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x76>
 800351c:	4b80      	ldr	r3, [pc, #512]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7f      	ldr	r2, [pc, #508]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e02e      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x98>
 8003532:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7a      	ldr	r2, [pc, #488]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b78      	ldr	r3, [pc, #480]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a77      	ldr	r2, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0xbc>
 8003556:	4b72      	ldr	r3, [pc, #456]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a71      	ldr	r2, [pc, #452]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 8003570:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b68      	ldr	r3, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a67      	ldr	r2, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fd ff6e 	bl	8001470 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fd ff6a 	bl	8001470 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e200      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xe4>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd ff5a 	bl	8001470 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fd ff56 	bl	8001470 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1ec      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x10c>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ee:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035fa:	4b49      	ldr	r3, [pc, #292]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
 8003606:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b43      	ldr	r3, [pc, #268]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1c0      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4939      	ldr	r1, [pc, #228]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_OscConfig+0x270>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fd ff0f 	bl	8001470 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fd ff0b 	bl	8001470 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1a1      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4927      	ldr	r1, [pc, #156]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCC_OscConfig+0x270>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fd feee 	bl	8001470 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fd feea 	bl	8001470 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e180      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03a      	beq.n	8003738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d019      	beq.n	80036fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_RCC_OscConfig+0x274>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fd fece 	bl	8001470 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fd feca 	bl	8001470 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e160      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f000 fa9c 	bl	8003c34 <RCC_Delay>
 80036fc:	e01c      	b.n	8003738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_RCC_OscConfig+0x274>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fd feb4 	bl	8001470 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370a:	e00f      	b.n	800372c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd feb0 	bl	8001470 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d908      	bls.n	800372c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e146      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	42420000 	.word	0x42420000
 8003728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b92      	ldr	r3, [pc, #584]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e9      	bne.n	800370c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a6 	beq.w	8003892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4a87      	ldr	r2, [pc, #540]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	61d3      	str	r3, [r2, #28]
 8003762:	4b85      	ldr	r3, [pc, #532]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b7f      	ldr	r3, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7e      	ldr	r2, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fd fe71 	bl	8001470 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fd fe6d 	bl	8001470 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	; 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e103      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b75      	ldr	r3, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x312>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6213      	str	r3, [r2, #32]
 80037c4:	e02d      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x334>
 80037ce:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a69      	ldr	r2, [pc, #420]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	4b67      	ldr	r3, [pc, #412]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a66      	ldr	r2, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	e01c      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d10c      	bne.n	800380a <HAL_RCC_OscConfig+0x356>
 80037f0:	4b61      	ldr	r3, [pc, #388]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a60      	ldr	r2, [pc, #384]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	4b5e      	ldr	r3, [pc, #376]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a5d      	ldr	r2, [pc, #372]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6213      	str	r3, [r2, #32]
 8003808:	e00b      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a5a      	ldr	r2, [pc, #360]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a57      	ldr	r2, [pc, #348]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d015      	beq.n	8003856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382a:	f7fd fe21 	bl	8001470 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fd fe1d 	bl	8001470 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0b1      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ee      	beq.n	8003832 <HAL_RCC_OscConfig+0x37e>
 8003854:	e014      	b.n	8003880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fd fe0b 	bl	8001470 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fd fe07 	bl	8001470 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e09b      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003874:	4b40      	ldr	r3, [pc, #256]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ee      	bne.n	800385e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8087 	beq.w	80039aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d061      	beq.n	800396c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d146      	bne.n	800393e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fd fddb 	bl	8001470 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7fd fdd7 	bl	8001470 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e06d      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d0:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d108      	bne.n	80038f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4921      	ldr	r1, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a19      	ldr	r1, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	430b      	orrs	r3, r1
 800390a:	491b      	ldr	r1, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fd fdab 	bl	8001470 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7fd fda7 	bl	8001470 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e03d      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x46a>
 800393c:	e035      	b.n	80039aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fd fd94 	bl	8001470 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7fd fd90 	bl	8001470 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e026      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x498>
 800396a:	e01e      	b.n	80039aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e019      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
 8003980:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x500>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	429a      	cmp	r2, r3
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0d0      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4965      	ldr	r1, [pc, #404]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0b8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	494d      	ldr	r1, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d040      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e073      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06b      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4936      	ldr	r1, [pc, #216]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fd fce2 	bl	8001470 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fd fcde 	bl	8001470 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e053      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d210      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4922      	ldr	r1, [pc, #136]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4916      	ldr	r1, [pc, #88]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b46:	f000 f821 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490a      	ldr	r1, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1cc>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1d0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd fc40 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08009614 	.word	0x08009614
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004

08003b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x30>
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8003bba:	e027      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bbe:	613b      	str	r3, [r7, #16]
      break;
 8003bc0:	e027      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	0c9b      	lsrs	r3, r3, #18
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bcc:	5cd3      	ldrb	r3, [r2, r3]
 8003bce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	0c5b      	lsrs	r3, r3, #17
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	4a11      	ldr	r2, [pc, #68]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bee:	fb03 f202 	mul.w	r2, r3, r2
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e004      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	613b      	str	r3, [r7, #16]
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c0e:	613b      	str	r3, [r7, #16]
      break;
 8003c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c12:	693b      	ldr	r3, [r7, #16]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	007a1200 	.word	0x007a1200
 8003c28:	08009624 	.word	0x08009624
 8003c2c:	08009634 	.word	0x08009634
 8003c30:	003d0900 	.word	0x003d0900

08003c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <RCC_Delay+0x34>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <RCC_Delay+0x38>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0a5b      	lsrs	r3, r3, #9
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c50:	bf00      	nop
  }
  while (Delay --);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	60fa      	str	r2, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <RCC_Delay+0x1c>
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d07d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c90:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	61d3      	str	r3, [r2, #28]
 8003ca8:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d118      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc4:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a42      	ldr	r2, [pc, #264]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fbce 	bl	8001470 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fd fbca 	bl	8001470 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e06d      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02e      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d027      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d14:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d2a:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fb99 	bl	8001470 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd fb95 	bl	8001470 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e036      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ee      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4917      	ldr	r1, [pc, #92]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	490b      	ldr	r1, [pc, #44]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4904      	ldr	r1, [pc, #16]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42420440 	.word	0x42420440

08003ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e03a      	b.n	8003e6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a18      	ldr	r2, [pc, #96]	; (8003e74 <HAL_TIM_Base_Start_IT+0x98>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_TIM_Base_Start_IT+0x58>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1e:	d009      	beq.n	8003e34 <HAL_TIM_Base_Start_IT+0x58>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_TIM_Base_Start_IT+0x58>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <HAL_TIM_Base_Start_IT+0xa0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d111      	bne.n	8003e58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b06      	cmp	r3, #6
 8003e44:	d010      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e56:	e007      	b.n	8003e68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800

08003e80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e041      	b.n	8003f16 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd f9a0 	bl	80011ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 fcc2 	bl	8004848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e041      	b.n	8003fb4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fd f977 	bl	8001238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f000 fc73 	bl	8004848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_TIM_PWM_Start+0x24>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e022      	b.n	8004026 <HAL_TIM_PWM_Start+0x6a>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d109      	bne.n	8003ffa <HAL_TIM_PWM_Start+0x3e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e015      	b.n	8004026 <HAL_TIM_PWM_Start+0x6a>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d109      	bne.n	8004014 <HAL_TIM_PWM_Start+0x58>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e008      	b.n	8004026 <HAL_TIM_PWM_Start+0x6a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e05e      	b.n	80040ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0x82>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800403c:	e013      	b.n	8004066 <HAL_TIM_PWM_Start+0xaa>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start+0x92>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404c:	e00b      	b.n	8004066 <HAL_TIM_PWM_Start+0xaa>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start+0xa2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	e003      	b.n	8004066 <HAL_TIM_PWM_Start+0xaa>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2201      	movs	r2, #1
 800406c:	6839      	ldr	r1, [r7, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fdd4 	bl	8004c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <HAL_TIM_PWM_Start+0x138>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d107      	bne.n	800408e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800408c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_TIM_PWM_Start+0x138>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_TIM_PWM_Start+0xfa>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a0:	d009      	beq.n	80040b6 <HAL_TIM_PWM_Start+0xfa>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <HAL_TIM_PWM_Start+0x13c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_TIM_PWM_Start+0xfa>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a12      	ldr	r2, [pc, #72]	; (80040fc <HAL_TIM_PWM_Start+0x140>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d111      	bne.n	80040da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d010      	beq.n	80040ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d8:	e007      	b.n	80040ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800

08004100 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e093      	b.n	800423c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7fd f8ab 	bl	8001284 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004144:	f023 0307 	bic.w	r3, r3, #7
 8004148:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 fb77 	bl	8004848 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	4313      	orrs	r3, r2
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041a0:	f023 030c 	bic.w	r3, r3, #12
 80041a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	4313      	orrs	r3, r2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	011a      	lsls	r2, r3, #4
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	031b      	lsls	r3, r3, #12
 80041d0:	4313      	orrs	r3, r2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80041de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	4313      	orrs	r3, r2
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004254:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800425c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004264:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800426c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d110      	bne.n	8004296 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d102      	bne.n	8004280 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800427a:	7b7b      	ldrb	r3, [r7, #13]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d001      	beq.n	8004284 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e089      	b.n	8004398 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004294:	e031      	b.n	80042fa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d110      	bne.n	80042be <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800429c:	7bbb      	ldrb	r3, [r7, #14]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d102      	bne.n	80042a8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042a2:	7b3b      	ldrb	r3, [r7, #12]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d001      	beq.n	80042ac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e075      	b.n	8004398 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042bc:	e01d      	b.n	80042fa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d108      	bne.n	80042d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042c4:	7bbb      	ldrb	r3, [r7, #14]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ca:	7b7b      	ldrb	r3, [r7, #13]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d102      	bne.n	80042d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042d0:	7b3b      	ldrb	r3, [r7, #12]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d001      	beq.n	80042da <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e05e      	b.n	8004398 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b04      	cmp	r3, #4
 8004304:	d010      	beq.n	8004328 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004306:	e01f      	b.n	8004348 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fc83 	bl	8004c1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0202 	orr.w	r2, r2, #2
 8004324:	60da      	str	r2, [r3, #12]
      break;
 8004326:	e02e      	b.n	8004386 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	2104      	movs	r1, #4
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fc73 	bl	8004c1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0204 	orr.w	r2, r2, #4
 8004344:	60da      	str	r2, [r3, #12]
      break;
 8004346:	e01e      	b.n	8004386 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fc63 	bl	8004c1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2201      	movs	r2, #1
 800435c:	2104      	movs	r1, #4
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fc5c 	bl	8004c1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0202 	orr.w	r2, r2, #2
 8004372:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0204 	orr.w	r2, r2, #4
 8004382:	60da      	str	r2, [r3, #12]
      break;
 8004384:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d122      	bne.n	80043fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d11b      	bne.n	80043fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0202 	mvn.w	r2, #2
 80043cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fa14 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa07 	bl	80047fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fa16 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b04      	cmp	r3, #4
 8004408:	d122      	bne.n	8004450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b04      	cmp	r3, #4
 8004416:	d11b      	bne.n	8004450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0204 	mvn.w	r2, #4
 8004420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f9ea 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f9dd 	bl	80047fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f9ec 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b08      	cmp	r3, #8
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0208 	mvn.w	r2, #8
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2204      	movs	r2, #4
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9c0 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f9b3 	bl	80047fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f9c2 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2208      	movs	r2, #8
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f996 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f989 	bl	80047fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f998 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d10e      	bne.n	8004524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d107      	bne.n	8004524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0201 	mvn.w	r2, #1
 800451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f964 	bl	80047ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b80      	cmp	r3, #128	; 0x80
 8004530:	d10e      	bne.n	8004550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d107      	bne.n	8004550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fc42 	bl	8004dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d10e      	bne.n	800457c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d107      	bne.n	800457c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f95c 	bl	8004834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b20      	cmp	r3, #32
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b20      	cmp	r3, #32
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0220 	mvn.w	r2, #32
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fc0d 	bl	8004dc2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_OC_ConfigChannel+0x1e>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e048      	b.n	8004660 <HAL_TIM_OC_ConfigChannel+0xb0>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b0c      	cmp	r3, #12
 80045da:	d839      	bhi.n	8004650 <HAL_TIM_OC_ConfigChannel+0xa0>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004651 	.word	0x08004651
 80045ec:	08004651 	.word	0x08004651
 80045f0:	08004651 	.word	0x08004651
 80045f4:	08004627 	.word	0x08004627
 80045f8:	08004651 	.word	0x08004651
 80045fc:	08004651 	.word	0x08004651
 8004600:	08004651 	.word	0x08004651
 8004604:	08004635 	.word	0x08004635
 8004608:	08004651 	.word	0x08004651
 800460c:	08004651 	.word	0x08004651
 8004610:	08004651 	.word	0x08004651
 8004614:	08004643 	.word	0x08004643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f974 	bl	800490c <TIM_OC1_SetConfig>
      break;
 8004624:	e017      	b.n	8004656 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 f9d3 	bl	80049d8 <TIM_OC2_SetConfig>
      break;
 8004632:	e010      	b.n	8004656 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fa36 	bl	8004aac <TIM_OC3_SetConfig>
      break;
 8004640:	e009      	b.n	8004656 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fa99 	bl	8004b80 <TIM_OC4_SetConfig>
      break;
 800464e:	e002      	b.n	8004656 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
      break;
 8004654:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004682:	2302      	movs	r3, #2
 8004684:	e0ae      	b.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b0c      	cmp	r3, #12
 8004692:	f200 809f 	bhi.w	80047d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	080046d1 	.word	0x080046d1
 80046a0:	080047d5 	.word	0x080047d5
 80046a4:	080047d5 	.word	0x080047d5
 80046a8:	080047d5 	.word	0x080047d5
 80046ac:	08004711 	.word	0x08004711
 80046b0:	080047d5 	.word	0x080047d5
 80046b4:	080047d5 	.word	0x080047d5
 80046b8:	080047d5 	.word	0x080047d5
 80046bc:	08004753 	.word	0x08004753
 80046c0:	080047d5 	.word	0x080047d5
 80046c4:	080047d5 	.word	0x080047d5
 80046c8:	080047d5 	.word	0x080047d5
 80046cc:	08004793 	.word	0x08004793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f918 	bl	800490c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0208 	orr.w	r2, r2, #8
 80046ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0204 	bic.w	r2, r2, #4
 80046fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6999      	ldr	r1, [r3, #24]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	619a      	str	r2, [r3, #24]
      break;
 800470e:	e064      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f95e 	bl	80049d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800472a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6999      	ldr	r1, [r3, #24]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	619a      	str	r2, [r3, #24]
      break;
 8004750:	e043      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f9a7 	bl	8004aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0208 	orr.w	r2, r2, #8
 800476c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0204 	bic.w	r2, r2, #4
 800477c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69d9      	ldr	r1, [r3, #28]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	61da      	str	r2, [r3, #28]
      break;
 8004790:	e023      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f9f1 	bl	8004b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69d9      	ldr	r1, [r3, #28]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	021a      	lsls	r2, r3, #8
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	61da      	str	r2, [r3, #28]
      break;
 80047d2:	e002      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	75fb      	strb	r3, [r7, #23]
      break;
 80047d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr

08004834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
	...

08004848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a29      	ldr	r2, [pc, #164]	; (8004900 <TIM_Base_SetConfig+0xb8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_Base_SetConfig+0x30>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d007      	beq.n	8004878 <TIM_Base_SetConfig+0x30>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a26      	ldr	r2, [pc, #152]	; (8004904 <TIM_Base_SetConfig+0xbc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0x30>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a25      	ldr	r2, [pc, #148]	; (8004908 <TIM_Base_SetConfig+0xc0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <TIM_Base_SetConfig+0xb8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00b      	beq.n	80048aa <TIM_Base_SetConfig+0x62>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d007      	beq.n	80048aa <TIM_Base_SetConfig+0x62>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a19      	ldr	r2, [pc, #100]	; (8004904 <TIM_Base_SetConfig+0xbc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_Base_SetConfig+0x62>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a18      	ldr	r2, [pc, #96]	; (8004908 <TIM_Base_SetConfig+0xc0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d108      	bne.n	80048bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a07      	ldr	r2, [pc, #28]	; (8004900 <TIM_Base_SetConfig+0xb8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d103      	bne.n	80048f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	615a      	str	r2, [r3, #20]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800

0800490c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f023 0201 	bic.w	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0303 	bic.w	r3, r3, #3
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 0302 	bic.w	r3, r3, #2
 8004954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <TIM_OC1_SetConfig+0xc8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10c      	bne.n	8004982 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0308 	bic.w	r3, r3, #8
 800496e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0304 	bic.w	r3, r3, #4
 8004980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <TIM_OC1_SetConfig+0xc8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d111      	bne.n	80049ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	621a      	str	r2, [r3, #32]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40012c00 	.word	0x40012c00

080049d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 0210 	bic.w	r2, r3, #16
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0320 	bic.w	r3, r3, #32
 8004a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <TIM_OC2_SetConfig+0xd0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10d      	bne.n	8004a54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <TIM_OC2_SetConfig+0xd0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d113      	bne.n	8004a84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	40012c00 	.word	0x40012c00

08004aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0303 	bic.w	r3, r3, #3
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <TIM_OC3_SetConfig+0xd0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10d      	bne.n	8004b26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <TIM_OC3_SetConfig+0xd0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d113      	bne.n	8004b56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	621a      	str	r2, [r3, #32]
}
 8004b70:	bf00      	nop
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40012c00 	.word	0x40012c00

08004b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	031b      	lsls	r3, r3, #12
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0f      	ldr	r2, [pc, #60]	; (8004c18 <TIM_OC4_SetConfig+0x98>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d109      	bne.n	8004bf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	019b      	lsls	r3, r3, #6
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	40012c00 	.word	0x40012c00

08004c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2201      	movs	r2, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1a      	ldr	r2, [r3, #32]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	fa01 f303 	lsl.w	r3, r1, r3
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e046      	b.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d009      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800

08004d20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e03d      	b.n	8004db8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004de6:	b084      	sub	sp, #16
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	f107 0014 	add.w	r0, r7, #20
 8004df4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	b004      	add	sp, #16
 8004e04:	4770      	bx	lr

08004e06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e16:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004e1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e3a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004e3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	4013      	ands	r3, r2
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e7e:	b084      	sub	sp, #16
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	f107 0014 	add.w	r0, r7, #20
 8004e8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	b004      	add	sp, #16
 8004ebc:	4770      	bx	lr
	...

08004ec0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b09d      	sub	sp, #116	; 0x74
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	78db      	ldrb	r3, [r3, #3]
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d81f      	bhi.n	8004f32 <USB_ActivateEndpoint+0x72>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <USB_ActivateEndpoint+0x38>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f3b 	.word	0x08004f3b
 8004f04:	08004f17 	.word	0x08004f17
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f14:	e012      	b.n	8004f3c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f16:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f1a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004f1e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f22:	e00b      	b.n	8004f3c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f30:	e004      	b.n	8004f3c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004f38:	e000      	b.n	8004f3c <USB_ActivateEndpoint+0x7c>
      break;
 8004f3a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	441a      	add	r2, r3
 8004f8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	7b1b      	ldrb	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f040 8178 	bne.w	800529e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8084 	beq.w	80050c0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	4413      	add	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	011a      	lsls	r2, r3, #4
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	88db      	ldrh	r3, [r3, #6]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	827b      	strh	r3, [r7, #18]
 8004ffa:	8a7b      	ldrh	r3, [r7, #18]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <USB_ActivateEndpoint+0x17c>
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	823b      	strh	r3, [r7, #16]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	8a3b      	ldrh	r3, [r7, #16]
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	78db      	ldrb	r3, [r3, #3]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d020      	beq.n	8005086 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505a:	81bb      	strh	r3, [r7, #12]
 800505c:	89bb      	ldrh	r3, [r7, #12]
 800505e:	f083 0320 	eor.w	r3, r3, #32
 8005062:	81bb      	strh	r3, [r7, #12]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	89bb      	ldrh	r3, [r7, #12]
 8005070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005080:	b29b      	uxth	r3, r3
 8005082:	8013      	strh	r3, [r2, #0]
 8005084:	e2d5      	b.n	8005632 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509c:	81fb      	strh	r3, [r7, #14]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	89fb      	ldrh	r3, [r7, #14]
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
 80050be:	e2b8      	b.n	8005632 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	633b      	str	r3, [r7, #48]	; 0x30
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	4413      	add	r3, r2
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	011a      	lsls	r2, r3, #4
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	88db      	ldrh	r3, [r3, #6]
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fe:	b29b      	uxth	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	4413      	add	r3, r2
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	011a      	lsls	r2, r3, #4
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	4413      	add	r3, r2
 8005112:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005122:	b29a      	uxth	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b3e      	cmp	r3, #62	; 0x3e
 800512e:	d91d      	bls.n	800516c <USB_ActivateEndpoint+0x2ac>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	66bb      	str	r3, [r7, #104]	; 0x68
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <USB_ActivateEndpoint+0x28a>
 8005144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005146:	3b01      	subs	r3, #1
 8005148:	66bb      	str	r3, [r7, #104]	; 0x68
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29a      	uxth	r2, r3
 8005150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005152:	b29b      	uxth	r3, r3
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b29b      	uxth	r3, r3
 8005158:	4313      	orrs	r3, r2
 800515a:	b29b      	uxth	r3, r3
 800515c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005164:	b29a      	uxth	r2, r3
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	801a      	strh	r2, [r3, #0]
 800516a:	e026      	b.n	80051ba <USB_ActivateEndpoint+0x2fa>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <USB_ActivateEndpoint+0x2ca>
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005182:	b29a      	uxth	r2, r3
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	801a      	strh	r2, [r3, #0]
 8005188:	e017      	b.n	80051ba <USB_ActivateEndpoint+0x2fa>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	66bb      	str	r3, [r7, #104]	; 0x68
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <USB_ActivateEndpoint+0x2e4>
 800519e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a0:	3301      	adds	r3, #1
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	029b      	lsls	r3, r3, #10
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4313      	orrs	r3, r2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80051c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01b      	beq.n	800520a <USB_ActivateEndpoint+0x34a>
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	843b      	strh	r3, [r7, #32]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	8c3b      	ldrh	r3, [r7, #32]
 80051f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	b29b      	uxth	r3, r3
 8005208:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d124      	bne.n	800525c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005228:	83bb      	strh	r3, [r7, #28]
 800522a:	8bbb      	ldrh	r3, [r7, #28]
 800522c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005230:	83bb      	strh	r3, [r7, #28]
 8005232:	8bbb      	ldrh	r3, [r7, #28]
 8005234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005238:	83bb      	strh	r3, [r7, #28]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	441a      	add	r2, r3
 8005244:	8bbb      	ldrh	r3, [r7, #28]
 8005246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005256:	b29b      	uxth	r3, r3
 8005258:	8013      	strh	r3, [r2, #0]
 800525a:	e1ea      	b.n	8005632 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	83fb      	strh	r3, [r7, #30]
 8005274:	8bfb      	ldrh	r3, [r7, #30]
 8005276:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800527a:	83fb      	strh	r3, [r7, #30]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	441a      	add	r2, r3
 8005286:	8bfb      	ldrh	r3, [r7, #30]
 8005288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	b29b      	uxth	r3, r3
 800529a:	8013      	strh	r3, [r2, #0]
 800529c:	e1c9      	b.n	8005632 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d11e      	bne.n	80052e4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80052ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052de:	b29b      	uxth	r3, r3
 80052e0:	8013      	strh	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	441a      	add	r2, r3
 8005308:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532a:	b29b      	uxth	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005330:	4413      	add	r3, r2
 8005332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	011a      	lsls	r2, r3, #4
 800533a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533c:	4413      	add	r3, r2
 800533e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005342:	65bb      	str	r3, [r7, #88]	; 0x58
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	891b      	ldrh	r3, [r3, #8]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	b29b      	uxth	r3, r3
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005364:	4413      	add	r3, r2
 8005366:	657b      	str	r3, [r7, #84]	; 0x54
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	011a      	lsls	r2, r3, #4
 800536e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005370:	4413      	add	r3, r2
 8005372:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005376:	653b      	str	r3, [r7, #80]	; 0x50
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	895b      	ldrh	r3, [r3, #10]
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005386:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f040 8093 	bne.w	80054b8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01b      	beq.n	80053e6 <USB_ActivateEndpoint+0x526>
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80053f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01b      	beq.n	8005436 <USB_ActivateEndpoint+0x576>
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005414:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005432:	b29b      	uxth	r3, r3
 8005434:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544c:	873b      	strh	r3, [r7, #56]	; 0x38
 800544e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005450:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005454:	873b      	strh	r3, [r7, #56]	; 0x38
 8005456:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005458:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800545c:	873b      	strh	r3, [r7, #56]	; 0x38
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005494:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	441a      	add	r2, r3
 80054a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]
 80054b6:	e0bc      	b.n	8005632 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80054c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01d      	beq.n	8005510 <USB_ActivateEndpoint+0x650>
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	441a      	add	r2, r3
 80054f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005520:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01d      	beq.n	8005568 <USB_ActivateEndpoint+0x6a8>
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	78db      	ldrb	r3, [r3, #3]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d024      	beq.n	80055ba <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005586:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800558a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800558e:	f083 0320 	eor.w	r3, r3, #32
 8005592:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80055a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	8013      	strh	r3, [r2, #0]
 80055b8:	e01d      	b.n	80055f6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80055e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800561e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	b29b      	uxth	r3, r3
 8005630:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005632:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005636:	4618      	mov	r0, r3
 8005638:	3774      	adds	r7, #116	; 0x74
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005640:	b480      	push	{r7}
 8005642:	b08d      	sub	sp, #52	; 0x34
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	7b1b      	ldrb	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 808e 	bne.w	8005770 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d044      	beq.n	80056e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	81bb      	strh	r3, [r7, #12]
 800566a:	89bb      	ldrh	r3, [r7, #12]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01b      	beq.n	80056ac <USB_DeactivateEndpoint+0x6c>
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	817b      	strh	r3, [r7, #10]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	897b      	ldrh	r3, [r7, #10]
 8005698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c2:	813b      	strh	r3, [r7, #8]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	441a      	add	r2, r3
 80056ce:	893b      	ldrh	r3, [r7, #8]
 80056d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	8013      	strh	r3, [r2, #0]
 80056e4:	e192      	b.n	8005a0c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	827b      	strh	r3, [r7, #18]
 80056f4:	8a7b      	ldrh	r3, [r7, #18]
 80056f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01b      	beq.n	8005736 <USB_DeactivateEndpoint+0xf6>
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005714:	823b      	strh	r3, [r7, #16]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	8a3b      	ldrh	r3, [r7, #16]
 8005722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800572e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005732:	b29b      	uxth	r3, r3
 8005734:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574c:	81fb      	strh	r3, [r7, #14]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	89fb      	ldrh	r3, [r7, #14]
 800575a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576a:	b29b      	uxth	r3, r3
 800576c:	8013      	strh	r3, [r2, #0]
 800576e:	e14d      	b.n	8005a0c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f040 80a5 	bne.w	80058c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	843b      	strh	r3, [r7, #32]
 8005788:	8c3b      	ldrh	r3, [r7, #32]
 800578a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01b      	beq.n	80057ca <USB_DeactivateEndpoint+0x18a>
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a8:	83fb      	strh	r3, [r7, #30]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	441a      	add	r2, r3
 80057b4:	8bfb      	ldrh	r3, [r7, #30]
 80057b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	83bb      	strh	r3, [r7, #28]
 80057d8:	8bbb      	ldrh	r3, [r7, #28]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01b      	beq.n	800581a <USB_DeactivateEndpoint+0x1da>
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f8:	837b      	strh	r3, [r7, #26]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	8b7b      	ldrh	r3, [r7, #26]
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005812:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005830:	833b      	strh	r3, [r7, #24]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	441a      	add	r2, r3
 800583c:	8b3b      	ldrh	r3, [r7, #24]
 800583e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800584e:	b29b      	uxth	r3, r3
 8005850:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005868:	82fb      	strh	r3, [r7, #22]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	8afb      	ldrh	r3, [r7, #22]
 8005876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a0:	82bb      	strh	r3, [r7, #20]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	441a      	add	r2, r3
 80058ac:	8abb      	ldrh	r3, [r7, #20]
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]
 80058c2:	e0a3      	b.n	8005a0c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80058d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <USB_DeactivateEndpoint+0x2d4>
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800590c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005910:	b29b      	uxth	r3, r3
 8005912:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005922:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <USB_DeactivateEndpoint+0x324>
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	853b      	strh	r3, [r7, #40]	; 0x28
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005960:	b29b      	uxth	r3, r3
 8005962:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	441a      	add	r2, r3
 8005986:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005998:	b29b      	uxth	r3, r3
 800599a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3734      	adds	r7, #52	; 0x34
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b0c2      	sub	sp, #264	; 0x108
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a26:	6018      	str	r0, [r3, #0]
 8005a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a30:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	f040 86b7 	bne.w	80067b2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d908      	bls.n	8005a72 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a70:	e007      	b.n	8005a82 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	7b1b      	ldrb	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d13a      	bne.n	8005b08 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6959      	ldr	r1, [r3, #20]
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	88da      	ldrh	r2, [r3, #6]
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ab4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ab8:	6800      	ldr	r0, [r0, #0]
 8005aba:	f001 fc9c 	bl	80073f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	011a      	lsls	r2, r3, #4
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4413      	add	r3, r2
 8005af4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	f000 be1f 	b.w	8006746 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	78db      	ldrb	r3, [r3, #3]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	f040 8462 	bne.w	80063de <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	f240 83df 	bls.w	80062f6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	441a      	add	r2, r3
 8005b7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba4:	1ad2      	subs	r2, r2, r3
 8005ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 81c7 	beq.w	8005f68 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	633b      	str	r3, [r7, #48]	; 0x30
 8005be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d177      	bne.n	8005ce6 <USB_EPStartXfer+0x2ce>
 8005bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	4413      	add	r3, r2
 8005c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	011a      	lsls	r2, r3, #4
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c46:	2b3e      	cmp	r3, #62	; 0x3e
 8005c48:	d921      	bls.n	8005c8e <USB_EPStartXfer+0x276>
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <USB_EPStartXfer+0x252>
 8005c60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c64:	3b01      	subs	r3, #1
 8005c66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	e050      	b.n	8005d30 <USB_EPStartXfer+0x318>
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <USB_EPStartXfer+0x294>
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	e041      	b.n	8005d30 <USB_EPStartXfer+0x318>
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <USB_EPStartXfer+0x2b4>
 8005cc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	029b      	lsls	r3, r3, #10
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e024      	b.n	8005d30 <USB_EPStartXfer+0x318>
 8005ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d11c      	bne.n	8005d30 <USB_EPStartXfer+0x318>
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	4413      	add	r3, r2
 8005d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	011a      	lsls	r2, r3, #4
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	4413      	add	r3, r2
 8005d20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	895b      	ldrh	r3, [r3, #10]
 8005d3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6959      	ldr	r1, [r3, #20]
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d5e:	6800      	ldr	r0, [r0, #0]
 8005d60:	f001 fb49 	bl	80073f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d74:	441a      	add	r2, r3
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d90f      	bls.n	8005dbe <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	621a      	str	r2, [r3, #32]
 8005dbc:	e00e      	b.n	8005ddc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d177      	bne.n	8005edc <USB_EPStartXfer+0x4c4>
 8005dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	011a      	lsls	r2, r3, #4
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e3e:	d921      	bls.n	8005e84 <USB_EPStartXfer+0x46c>
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4e:	f003 031f 	and.w	r3, r3, #31
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <USB_EPStartXfer+0x448>
 8005e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	029b      	lsls	r3, r3, #10
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	4313      	orrs	r3, r2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e056      	b.n	8005f32 <USB_EPStartXfer+0x51a>
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <USB_EPStartXfer+0x48a>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e047      	b.n	8005f32 <USB_EPStartXfer+0x51a>
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <USB_EPStartXfer+0x4aa>
 8005eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	e02a      	b.n	8005f32 <USB_EPStartXfer+0x51a>
 8005edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d122      	bne.n	8005f32 <USB_EPStartXfer+0x51a>
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	011a      	lsls	r2, r3, #4
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	4413      	add	r3, r2
 8005f22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	891b      	ldrh	r3, [r3, #8]
 8005f3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6959      	ldr	r1, [r3, #20]
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f60:	6800      	ldr	r0, [r0, #0]
 8005f62:	f001 fa48 	bl	80073f6 <USB_WritePMA>
 8005f66:	e3ee      	b.n	8006746 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d177      	bne.n	8006068 <USB_EPStartXfer+0x650>
 8005f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f98:	4413      	add	r3, r2
 8005f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	011a      	lsls	r2, r3, #4
 8005faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fac:	4413      	add	r3, r2
 8005fae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc8:	2b3e      	cmp	r3, #62	; 0x3e
 8005fca:	d921      	bls.n	8006010 <USB_EPStartXfer+0x5f8>
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <USB_EPStartXfer+0x5d4>
 8005fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	029b      	lsls	r3, r3, #10
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006008:	b29a      	uxth	r2, r3
 800600a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	e056      	b.n	80060be <USB_EPStartXfer+0x6a6>
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <USB_EPStartXfer+0x616>
 8006018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006026:	b29a      	uxth	r2, r3
 8006028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e047      	b.n	80060be <USB_EPStartXfer+0x6a6>
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <USB_EPStartXfer+0x636>
 8006044:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006048:	3301      	adds	r3, #1
 800604a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800604e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006058:	b29b      	uxth	r3, r3
 800605a:	029b      	lsls	r3, r3, #10
 800605c:	b29b      	uxth	r3, r3
 800605e:	4313      	orrs	r3, r2
 8006060:	b29a      	uxth	r2, r3
 8006062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e02a      	b.n	80060be <USB_EPStartXfer+0x6a6>
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d122      	bne.n	80060be <USB_EPStartXfer+0x6a6>
 8006078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	653b      	str	r3, [r7, #80]	; 0x50
 8006084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006098:	4413      	add	r3, r2
 800609a:	653b      	str	r3, [r7, #80]	; 0x50
 800609c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	011a      	lsls	r2, r3, #4
 80060aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ac:	4413      	add	r3, r2
 80060ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	891b      	ldrh	r3, [r3, #8]
 80060ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6959      	ldr	r1, [r3, #20]
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060ec:	6800      	ldr	r0, [r0, #0]
 80060ee:	f001 f982 	bl	80073f6 <USB_WritePMA>
            ep->xfer_buff += len;
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006102:	441a      	add	r2, r3
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	429a      	cmp	r2, r3
 800612a:	d90f      	bls.n	800614c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6a1a      	ldr	r2, [r3, #32]
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613c:	1ad2      	subs	r2, r2, r3
 800613e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	621a      	str	r2, [r3, #32]
 800614a:	e00e      	b.n	800616a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800615c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2200      	movs	r2, #0
 8006168:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800616a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	643b      	str	r3, [r7, #64]	; 0x40
 8006176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d177      	bne.n	8006276 <USB_EPStartXfer+0x85e>
 8006186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	63bb      	str	r3, [r7, #56]	; 0x38
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	4413      	add	r3, r2
 80061a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	011a      	lsls	r2, r3, #4
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	4413      	add	r3, r2
 80061bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d6:	2b3e      	cmp	r3, #62	; 0x3e
 80061d8:	d921      	bls.n	800621e <USB_EPStartXfer+0x806>
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <USB_EPStartXfer+0x7e2>
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f4:	3b01      	subs	r3, #1
 80061f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	b29b      	uxth	r3, r3
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	b29b      	uxth	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	b29b      	uxth	r3, r3
 800620e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006216:	b29a      	uxth	r2, r3
 8006218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e050      	b.n	80062c0 <USB_EPStartXfer+0x8a8>
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <USB_EPStartXfer+0x824>
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006234:	b29a      	uxth	r2, r3
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	e041      	b.n	80062c0 <USB_EPStartXfer+0x8a8>
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006240:	085b      	lsrs	r3, r3, #1
 8006242:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <USB_EPStartXfer+0x844>
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	3301      	adds	r3, #1
 8006258:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800625c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29a      	uxth	r2, r3
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006266:	b29b      	uxth	r3, r3
 8006268:	029b      	lsls	r3, r3, #10
 800626a:	b29b      	uxth	r3, r3
 800626c:	4313      	orrs	r3, r2
 800626e:	b29a      	uxth	r2, r3
 8006270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	e024      	b.n	80062c0 <USB_EPStartXfer+0x8a8>
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d11c      	bne.n	80062c0 <USB_EPStartXfer+0x8a8>
 8006286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006294:	b29b      	uxth	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629a:	4413      	add	r3, r2
 800629c:	643b      	str	r3, [r7, #64]	; 0x40
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	011a      	lsls	r2, r3, #4
 80062ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ae:	4413      	add	r3, r2
 80062b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	895b      	ldrh	r3, [r3, #10]
 80062cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6959      	ldr	r1, [r3, #20]
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062ee:	6800      	ldr	r0, [r0, #0]
 80062f0:	f001 f881 	bl	80073f6 <USB_WritePMA>
 80062f4:	e227      	b.n	8006746 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80062f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800634e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635e:	b29b      	uxth	r3, r3
 8006360:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006382:	4413      	add	r3, r2
 8006384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	011a      	lsls	r2, r3, #4
 8006394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006396:	4413      	add	r3, r2
 8006398:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800639c:	65bb      	str	r3, [r7, #88]	; 0x58
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	891b      	ldrh	r3, [r3, #8]
 80063b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6959      	ldr	r1, [r3, #20]
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063d6:	6800      	ldr	r0, [r0, #0]
 80063d8:	f001 f80d 	bl	80073f6 <USB_WritePMA>
 80063dc:	e1b3      	b.n	8006746 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80c6 	beq.w	80065b0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	673b      	str	r3, [r7, #112]	; 0x70
 8006430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d177      	bne.n	8006530 <USB_EPStartXfer+0xb18>
 8006440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	66bb      	str	r3, [r7, #104]	; 0x68
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645a:	b29b      	uxth	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006460:	4413      	add	r3, r2
 8006462:	66bb      	str	r3, [r7, #104]	; 0x68
 8006464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	011a      	lsls	r2, r3, #4
 8006472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006474:	4413      	add	r3, r2
 8006476:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800647a:	667b      	str	r3, [r7, #100]	; 0x64
 800647c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006486:	b29a      	uxth	r2, r3
 8006488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006490:	2b3e      	cmp	r3, #62	; 0x3e
 8006492:	d921      	bls.n	80064d8 <USB_EPStartXfer+0xac0>
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <USB_EPStartXfer+0xa9c>
 80064aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064ae:	3b01      	subs	r3, #1
 80064b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064be:	b29b      	uxth	r3, r3
 80064c0:	029b      	lsls	r3, r3, #10
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4313      	orrs	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064d4:	801a      	strh	r2, [r3, #0]
 80064d6:	e050      	b.n	800657a <USB_EPStartXfer+0xb62>
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <USB_EPStartXfer+0xade>
 80064e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e041      	b.n	800657a <USB_EPStartXfer+0xb62>
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <USB_EPStartXfer+0xafe>
 800650c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006510:	3301      	adds	r3, #1
 8006512:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006520:	b29b      	uxth	r3, r3
 8006522:	029b      	lsls	r3, r3, #10
 8006524:	b29b      	uxth	r3, r3
 8006526:	4313      	orrs	r3, r2
 8006528:	b29a      	uxth	r2, r3
 800652a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e024      	b.n	800657a <USB_EPStartXfer+0xb62>
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d11c      	bne.n	800657a <USB_EPStartXfer+0xb62>
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006554:	4413      	add	r3, r2
 8006556:	673b      	str	r3, [r7, #112]	; 0x70
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	011a      	lsls	r2, r3, #4
 8006566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006568:	4413      	add	r3, r2
 800656a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800656e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006574:	b29a      	uxth	r2, r3
 8006576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006578:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	895b      	ldrh	r3, [r3, #10]
 8006586:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800658a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6959      	ldr	r1, [r3, #20]
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659a:	b29b      	uxth	r3, r3
 800659c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065a8:	6800      	ldr	r0, [r0, #0]
 80065aa:	f000 ff24 	bl	80073f6 <USB_WritePMA>
 80065ae:	e0ca      	b.n	8006746 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d177      	bne.n	80066b0 <USB_EPStartXfer+0xc98>
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065e0:	4413      	add	r3, r2
 80065e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	011a      	lsls	r2, r3, #4
 80065f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065f4:	4413      	add	r3, r2
 80065f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80065fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006606:	b29a      	uxth	r2, r3
 8006608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006610:	2b3e      	cmp	r3, #62	; 0x3e
 8006612:	d921      	bls.n	8006658 <USB_EPStartXfer+0xc40>
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <USB_EPStartXfer+0xc1c>
 800662a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800662e:	3b01      	subs	r3, #1
 8006630:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800663e:	b29b      	uxth	r3, r3
 8006640:	029b      	lsls	r3, r3, #10
 8006642:	b29b      	uxth	r3, r3
 8006644:	4313      	orrs	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006650:	b29a      	uxth	r2, r3
 8006652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e05c      	b.n	8006712 <USB_EPStartXfer+0xcfa>
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <USB_EPStartXfer+0xc5e>
 8006660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666e:	b29a      	uxth	r2, r3
 8006670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	e04d      	b.n	8006712 <USB_EPStartXfer+0xcfa>
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <USB_EPStartXfer+0xc7e>
 800668c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006690:	3301      	adds	r3, #1
 8006692:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29a      	uxth	r2, r3
 800669c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	029b      	lsls	r3, r3, #10
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	4313      	orrs	r3, r2
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e030      	b.n	8006712 <USB_EPStartXfer+0xcfa>
 80066b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d128      	bne.n	8006712 <USB_EPStartXfer+0xcfa>
 80066c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e4:	4413      	add	r3, r2
 80066e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	011a      	lsls	r2, r3, #4
 80066f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066fc:	4413      	add	r3, r2
 80066fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006710:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	891b      	ldrh	r3, [r3, #8]
 800671e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6959      	ldr	r1, [r3, #20]
 800672e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006732:	b29b      	uxth	r3, r3
 8006734:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006738:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800673c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006740:	6800      	ldr	r0, [r0, #0]
 8006742:	f000 fe58 	bl	80073f6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676c:	817b      	strh	r3, [r7, #10]
 800676e:	897b      	ldrh	r3, [r7, #10]
 8006770:	f083 0310 	eor.w	r3, r3, #16
 8006774:	817b      	strh	r3, [r7, #10]
 8006776:	897b      	ldrh	r3, [r7, #10]
 8006778:	f083 0320 	eor.w	r3, r3, #32
 800677c:	817b      	strh	r3, [r7, #10]
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	897b      	ldrh	r3, [r7, #10]
 800679a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	8013      	strh	r3, [r2, #0]
 80067ae:	f000 bcde 	b.w	800716e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	7b1b      	ldrb	r3, [r3, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 80bb 	bne.w	800693a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80067c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d917      	bls.n	8006810 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80067e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	619a      	str	r2, [r3, #24]
 800680e:	e00e      	b.n	800682e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800682e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800683c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006852:	4413      	add	r3, r2
 8006854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	011a      	lsls	r2, r3, #4
 8006866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800686a:	4413      	add	r3, r2
 800686c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006874:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006880:	b29a      	uxth	r2, r3
 8006882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688c:	2b3e      	cmp	r3, #62	; 0x3e
 800688e:	d924      	bls.n	80068da <USB_EPStartXfer+0xec2>
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <USB_EPStartXfer+0xe98>
 80068a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068aa:	3b01      	subs	r3, #1
 80068ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068bc:	b29b      	uxth	r3, r3
 80068be:	029b      	lsls	r3, r3, #10
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4313      	orrs	r3, r2
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	f000 bc10 	b.w	80070fa <USB_EPStartXfer+0x16e2>
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10c      	bne.n	80068fc <USB_EPStartXfer+0xee4>
 80068e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e3fe      	b.n	80070fa <USB_EPStartXfer+0x16e2>
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d004      	beq.n	800691c <USB_EPStartXfer+0xf04>
 8006912:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006916:	3301      	adds	r3, #1
 8006918:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800691c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29a      	uxth	r2, r3
 8006924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006928:	b29b      	uxth	r3, r3
 800692a:	029b      	lsls	r3, r3, #10
 800692c:	b29b      	uxth	r3, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	b29a      	uxth	r2, r3
 8006932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	e3df      	b.n	80070fa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800693a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	78db      	ldrb	r3, [r3, #3]
 8006946:	2b02      	cmp	r3, #2
 8006948:	f040 8218 	bne.w	8006d7c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f040 809d 	bne.w	8006a98 <USB_EPStartXfer+0x1080>
 800695e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800696c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800697a:	b29b      	uxth	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006982:	4413      	add	r3, r2
 8006984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	011a      	lsls	r2, r3, #4
 8006996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800699a:	4413      	add	r3, r2
 800699c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b3e      	cmp	r3, #62	; 0x3e
 80069c6:	d92b      	bls.n	8006a20 <USB_EPStartXfer+0x1008>
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <USB_EPStartXfer+0xfe0>
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f2:	3b01      	subs	r3, #1
 80069f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e070      	b.n	8006b02 <USB_EPStartXfer+0x10ea>
 8006a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10c      	bne.n	8006a4a <USB_EPStartXfer+0x1032>
 8006a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e05b      	b.n	8006b02 <USB_EPStartXfer+0x10ea>
 8006a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <USB_EPStartXfer+0x1062>
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	3301      	adds	r3, #1
 8006a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e034      	b.n	8006b02 <USB_EPStartXfer+0x10ea>
 8006a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d12c      	bne.n	8006b02 <USB_EPStartXfer+0x10ea>
 8006aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006acc:	4413      	add	r3, r2
 8006ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	011a      	lsls	r2, r3, #4
 8006ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 809d 	bne.w	8006c5c <USB_EPStartXfer+0x1244>
 8006b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b46:	4413      	add	r3, r2
 8006b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	011a      	lsls	r2, r3, #4
 8006b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b5e:	4413      	add	r3, r2
 8006b60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b3e      	cmp	r3, #62	; 0x3e
 8006b8a:	d92b      	bls.n	8006be4 <USB_EPStartXfer+0x11cc>
 8006b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <USB_EPStartXfer+0x11a4>
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	029b      	lsls	r3, r3, #10
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e069      	b.n	8006cb8 <USB_EPStartXfer+0x12a0>
 8006be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10c      	bne.n	8006c0e <USB_EPStartXfer+0x11f6>
 8006bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e054      	b.n	8006cb8 <USB_EPStartXfer+0x12a0>
 8006c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <USB_EPStartXfer+0x1226>
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c38:	3301      	adds	r3, #1
 8006c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	4313      	orrs	r3, r2
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	e02d      	b.n	8006cb8 <USB_EPStartXfer+0x12a0>
 8006c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d125      	bne.n	8006cb8 <USB_EPStartXfer+0x12a0>
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c82:	4413      	add	r3, r2
 8006c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cb6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8218 	beq.w	80070fa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <USB_EPStartXfer+0x12ea>
 8006cf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 81f5 	bne.w	80070fa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f040 81ee 	bne.w	80070fa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d44:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]
 8006d7a:	e1be      	b.n	80070fa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	78db      	ldrb	r3, [r3, #3]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	f040 81b4 	bne.w	80070f6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d917      	bls.n	8006dda <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699a      	ldr	r2, [r3, #24]
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dca:	1ad2      	subs	r2, r2, r3
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	619a      	str	r2, [r3, #24]
 8006dd8:	e00e      	b.n	8006df8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2200      	movs	r2, #0
 8006df6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f040 8085 	bne.w	8006f14 <USB_EPStartXfer+0x14fc>
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e2e:	4413      	add	r3, r2
 8006e30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	011a      	lsls	r2, r3, #4
 8006e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e68:	2b3e      	cmp	r3, #62	; 0x3e
 8006e6a:	d923      	bls.n	8006eb4 <USB_EPStartXfer+0x149c>
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d104      	bne.n	8006e8c <USB_EPStartXfer+0x1474>
 8006e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e86:	3b01      	subs	r3, #1
 8006e88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	029b      	lsls	r3, r3, #10
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e060      	b.n	8006f76 <USB_EPStartXfer+0x155e>
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10c      	bne.n	8006ed6 <USB_EPStartXfer+0x14be>
 8006ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e04f      	b.n	8006f76 <USB_EPStartXfer+0x155e>
 8006ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <USB_EPStartXfer+0x14de>
 8006eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	e030      	b.n	8006f76 <USB_EPStartXfer+0x155e>
 8006f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d128      	bne.n	8006f76 <USB_EPStartXfer+0x155e>
 8006f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f48:	4413      	add	r3, r2
 8006f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	011a      	lsls	r2, r3, #4
 8006f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f60:	4413      	add	r3, r2
 8006f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f040 8085 	bne.w	80070a0 <USB_EPStartXfer+0x1688>
 8006f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fba:	4413      	add	r3, r2
 8006fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	011a      	lsls	r2, r3, #4
 8006fce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff6:	d923      	bls.n	8007040 <USB_EPStartXfer+0x1628>
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <USB_EPStartXfer+0x1600>
 800700e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007012:	3b01      	subs	r3, #1
 8007014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007018:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29a      	uxth	r2, r3
 8007020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29b      	uxth	r3, r3
 800702a:	4313      	orrs	r3, r2
 800702c:	b29b      	uxth	r3, r3
 800702e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e05c      	b.n	80070fa <USB_EPStartXfer+0x16e2>
 8007040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10c      	bne.n	8007062 <USB_EPStartXfer+0x164a>
 8007048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	e04b      	b.n	80070fa <USB_EPStartXfer+0x16e2>
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d004      	beq.n	8007082 <USB_EPStartXfer+0x166a>
 8007078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800707c:	3301      	adds	r3, #1
 800707e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29a      	uxth	r2, r3
 800708a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800708e:	b29b      	uxth	r3, r3
 8007090:	029b      	lsls	r3, r3, #10
 8007092:	b29b      	uxth	r3, r3
 8007094:	4313      	orrs	r3, r2
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e02c      	b.n	80070fa <USB_EPStartXfer+0x16e2>
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d124      	bne.n	80070fa <USB_EPStartXfer+0x16e2>
 80070b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070c6:	4413      	add	r3, r2
 80070c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	011a      	lsls	r2, r3, #4
 80070da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070de:	4413      	add	r3, r2
 80070e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e001      	b.n	80070fa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e03a      	b.n	8007170 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007124:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007128:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800712c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007130:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007134:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007138:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800713c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800715a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	b29b      	uxth	r3, r3
 800716c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d020      	beq.n	80071ce <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a2:	81bb      	strh	r3, [r7, #12]
 80071a4:	89bb      	ldrh	r3, [r7, #12]
 80071a6:	f083 0310 	eor.w	r3, r3, #16
 80071aa:	81bb      	strh	r3, [r7, #12]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	89bb      	ldrh	r3, [r7, #12]
 80071b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]
 80071cc:	e01f      	b.n	800720e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e4:	81fb      	strh	r3, [r7, #14]
 80071e6:	89fb      	ldrh	r3, [r7, #14]
 80071e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071ec:	81fb      	strh	r3, [r7, #14]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800721a:	b480      	push	{r7}
 800721c:	b087      	sub	sp, #28
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7b1b      	ldrb	r3, [r3, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 809d 	bne.w	8007368 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04c      	beq.n	80072d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	823b      	strh	r3, [r7, #16]
 8007244:	8a3b      	ldrh	r3, [r7, #16]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01b      	beq.n	8007286 <USB_EPClearStall+0x6c>
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007264:	81fb      	strh	r3, [r7, #14]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	441a      	add	r2, r3
 8007270:	89fb      	ldrh	r3, [r7, #14]
 8007272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800727a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800727e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007282:	b29b      	uxth	r3, r3
 8007284:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	78db      	ldrb	r3, [r3, #3]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d06c      	beq.n	8007368 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a4:	81bb      	strh	r3, [r7, #12]
 80072a6:	89bb      	ldrh	r3, [r7, #12]
 80072a8:	f083 0320 	eor.w	r3, r3, #32
 80072ac:	81bb      	strh	r3, [r7, #12]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	441a      	add	r2, r3
 80072b8:	89bb      	ldrh	r3, [r7, #12]
 80072ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	8013      	strh	r3, [r2, #0]
 80072ce:	e04b      	b.n	8007368 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	82fb      	strh	r3, [r7, #22]
 80072de:	8afb      	ldrh	r3, [r7, #22]
 80072e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01b      	beq.n	8007320 <USB_EPClearStall+0x106>
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	82bb      	strh	r3, [r7, #20]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	8abb      	ldrh	r3, [r7, #20]
 800730c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731c:	b29b      	uxth	r3, r3
 800731e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	827b      	strh	r3, [r7, #18]
 8007338:	8a7b      	ldrh	r3, [r7, #18]
 800733a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800733e:	827b      	strh	r3, [r7, #18]
 8007340:	8a7b      	ldrh	r3, [r7, #18]
 8007342:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007346:	827b      	strh	r3, [r7, #18]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	441a      	add	r2, r3
 8007352:	8a7b      	ldrh	r3, [r7, #18]
 8007354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007364:	b29b      	uxth	r3, r3
 8007366:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr

08007374 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2280      	movs	r2, #128	; 0x80
 800738a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr

080073ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr

080073c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr

080073e0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr

080073f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b08b      	sub	sp, #44	; 0x2c
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	4611      	mov	r1, r2
 8007402:	461a      	mov	r2, r3
 8007404:	460b      	mov	r3, r1
 8007406:	80fb      	strh	r3, [r7, #6]
 8007408:	4613      	mov	r3, r2
 800740a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800740c:	88bb      	ldrh	r3, [r7, #4]
 800740e:	3301      	adds	r3, #1
 8007410:	085b      	lsrs	r3, r3, #1
 8007412:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	005a      	lsls	r2, r3, #1
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007428:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
 800742e:	e01e      	b.n	800746e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	3301      	adds	r3, #1
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	b21a      	sxth	r2, r3
 8007440:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007444:	4313      	orrs	r3, r2
 8007446:	b21b      	sxth	r3, r3
 8007448:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	8a7a      	ldrh	r2, [r7, #18]
 800744e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	3302      	adds	r3, #2
 8007454:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	3302      	adds	r3, #2
 800745a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	3301      	adds	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	3301      	adds	r3, #1
 8007466:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	3b01      	subs	r3, #1
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1dd      	bne.n	8007430 <USB_WritePMA+0x3a>
  }
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	372c      	adds	r7, #44	; 0x2c
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007480:	b480      	push	{r7}
 8007482:	b08b      	sub	sp, #44	; 0x2c
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4611      	mov	r1, r2
 800748c:	461a      	mov	r2, r3
 800748e:	460b      	mov	r3, r1
 8007490:	80fb      	strh	r3, [r7, #6]
 8007492:	4613      	mov	r3, r2
 8007494:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007496:	88bb      	ldrh	r3, [r7, #4]
 8007498:	085b      	lsrs	r3, r3, #1
 800749a:	b29b      	uxth	r3, r3
 800749c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074a6:	88fb      	ldrh	r3, [r7, #6]
 80074a8:	005a      	lsls	r2, r3, #1
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074b2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
 80074b8:	e01b      	b.n	80074f2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	3302      	adds	r3, #2
 80074c6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	3301      	adds	r3, #1
 80074d4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	0a1b      	lsrs	r3, r3, #8
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	3301      	adds	r3, #1
 80074e4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	3302      	adds	r3, #2
 80074ea:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	3b01      	subs	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e0      	bne.n	80074ba <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80074f8:	88bb      	ldrh	r3, [r7, #4]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	b2da      	uxtb	r2, r3
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	701a      	strb	r2, [r3, #0]
  }
}
 8007514:	bf00      	nop
 8007516:	372c      	adds	r7, #44	; 0x2c
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr

0800751e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7c1b      	ldrb	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d115      	bne.n	8007562 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800753a:	2202      	movs	r2, #2
 800753c:	2181      	movs	r1, #129	; 0x81
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 fe99 	bl	8009276 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800754a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800754e:	2202      	movs	r2, #2
 8007550:	2101      	movs	r1, #1
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fe8f 	bl	8009276 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007560:	e012      	b.n	8007588 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	2202      	movs	r2, #2
 8007566:	2181      	movs	r1, #129	; 0x81
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 fe84 	bl	8009276 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	2202      	movs	r2, #2
 8007578:	2101      	movs	r1, #1
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 fe7b 	bl	8009276 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007588:	2308      	movs	r3, #8
 800758a:	2203      	movs	r2, #3
 800758c:	2182      	movs	r1, #130	; 0x82
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 fe71 	bl	8009276 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800759a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800759e:	f001 ff91 	bl	80094c4 <USBD_static_malloc>
 80075a2:	4602      	mov	r2, r0
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d102      	bne.n	80075ba <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
 80075b8:	e026      	b.n	8007608 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	7c1b      	ldrb	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d109      	bne.n	80075f8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ee:	2101      	movs	r1, #1
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 ff31 	bl	8009458 <USBD_LL_PrepareReceive>
 80075f6:	e007      	b.n	8007608 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075fe:	2340      	movs	r3, #64	; 0x40
 8007600:	2101      	movs	r1, #1
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 ff28 	bl	8009458 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007622:	2181      	movs	r1, #129	; 0x81
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 fe4c 	bl	80092c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007630:	2101      	movs	r1, #1
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fe45 	bl	80092c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007640:	2182      	movs	r1, #130	; 0x82
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fe3d 	bl	80092c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00e      	beq.n	8007676 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	4618      	mov	r0, r3
 800766a:	f001 ff37 	bl	80094dc <USBD_static_free>
    pdev->pClassData = NULL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007690:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d039      	beq.n	800771e <USBD_CDC_Setup+0x9e>
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d17f      	bne.n	80077ae <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	88db      	ldrh	r3, [r3, #6]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d029      	beq.n	800770a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b25b      	sxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	da11      	bge.n	80076e4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80076cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	88d2      	ldrh	r2, [r2, #6]
 80076d2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076d4:	6939      	ldr	r1, [r7, #16]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	88db      	ldrh	r3, [r3, #6]
 80076da:	461a      	mov	r2, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fa0a 	bl	8008af6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80076e2:	e06b      	b.n	80077bc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	785a      	ldrb	r2, [r3, #1]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	88db      	ldrh	r3, [r3, #6]
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076fa:	6939      	ldr	r1, [r7, #16]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	88db      	ldrh	r3, [r3, #6]
 8007700:	461a      	mov	r2, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 fa25 	bl	8008b52 <USBD_CtlPrepareRx>
      break;
 8007708:	e058      	b.n	80077bc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	7850      	ldrb	r0, [r2, #1]
 8007716:	2200      	movs	r2, #0
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	4798      	blx	r3
      break;
 800771c:	e04e      	b.n	80077bc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b0b      	cmp	r3, #11
 8007724:	d02e      	beq.n	8007784 <USBD_CDC_Setup+0x104>
 8007726:	2b0b      	cmp	r3, #11
 8007728:	dc38      	bgt.n	800779c <USBD_CDC_Setup+0x11c>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <USBD_CDC_Setup+0xb4>
 800772e:	2b0a      	cmp	r3, #10
 8007730:	d014      	beq.n	800775c <USBD_CDC_Setup+0xdc>
 8007732:	e033      	b.n	800779c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773a:	2b03      	cmp	r3, #3
 800773c:	d107      	bne.n	800774e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800773e:	f107 030c 	add.w	r3, r7, #12
 8007742:	2202      	movs	r2, #2
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 f9d5 	bl	8008af6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800774c:	e02e      	b.n	80077ac <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 f966 	bl	8008a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8007756:	2302      	movs	r3, #2
 8007758:	75fb      	strb	r3, [r7, #23]
          break;
 800775a:	e027      	b.n	80077ac <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007762:	2b03      	cmp	r3, #3
 8007764:	d107      	bne.n	8007776 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007766:	f107 030f 	add.w	r3, r7, #15
 800776a:	2201      	movs	r2, #1
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 f9c1 	bl	8008af6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007774:	e01a      	b.n	80077ac <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 f952 	bl	8008a22 <USBD_CtlError>
            ret = USBD_FAIL;
 800777e:	2302      	movs	r3, #2
 8007780:	75fb      	strb	r3, [r7, #23]
          break;
 8007782:	e013      	b.n	80077ac <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778a:	2b03      	cmp	r3, #3
 800778c:	d00d      	beq.n	80077aa <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f946 	bl	8008a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8007796:	2302      	movs	r3, #2
 8007798:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800779a:	e006      	b.n	80077aa <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 f93f 	bl	8008a22 <USBD_CtlError>
          ret = USBD_FAIL;
 80077a4:	2302      	movs	r3, #2
 80077a6:	75fb      	strb	r3, [r7, #23]
          break;
 80077a8:	e000      	b.n	80077ac <USBD_CDC_Setup+0x12c>
          break;
 80077aa:	bf00      	nop
      }
      break;
 80077ac:	e006      	b.n	80077bc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 f936 	bl	8008a22 <USBD_CtlError>
      ret = USBD_FAIL;
 80077b6:	2302      	movs	r3, #2
 80077b8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ba:	bf00      	nop
  }

  return ret;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077e0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d03a      	beq.n	8007862 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80077ec:	78fa      	ldrb	r2, [r7, #3]
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	331c      	adds	r3, #28
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d029      	beq.n	8007856 <USBD_CDC_DataIn+0x90>
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	331c      	adds	r3, #28
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	78f9      	ldrb	r1, [r7, #3]
 8007816:	68b8      	ldr	r0, [r7, #8]
 8007818:	460b      	mov	r3, r1
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	4403      	add	r3, r0
 8007822:	3338      	adds	r3, #56	; 0x38
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	fbb2 f1f3 	udiv	r1, r2, r3
 800782a:	fb01 f303 	mul.w	r3, r1, r3
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d110      	bne.n	8007856 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	331c      	adds	r3, #28
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007848:	78f9      	ldrb	r1, [r7, #3]
 800784a:	2300      	movs	r3, #0
 800784c:	2200      	movs	r2, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fddf 	bl	8009412 <USBD_LL_Transmit>
 8007854:	e003      	b.n	800785e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	e000      	b.n	8007864 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007862:	2302      	movs	r3, #2
  }
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 fe0a 	bl	800949e <USBD_LL_GetRxDataSize>
 800788a:	4602      	mov	r2, r0
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078b0:	4611      	mov	r1, r2
 80078b2:	4798      	blx	r3

    return USBD_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	e000      	b.n	80078ba <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80078b8:	2302      	movs	r3, #2
  }
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d015      	beq.n	8007908 <USBD_CDC_EP0_RxReady+0x46>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078e2:	2bff      	cmp	r3, #255	; 0xff
 80078e4:	d010      	beq.n	8007908 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80078f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078fc:	b292      	uxth	r2, r2
 80078fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	22ff      	movs	r2, #255	; 0xff
 8007904:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2243      	movs	r2, #67	; 0x43
 8007920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007922:	4b03      	ldr	r3, [pc, #12]	; (8007930 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000094 	.word	0x20000094

08007934 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2243      	movs	r2, #67	; 0x43
 8007940:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007942:	4b03      	ldr	r3, [pc, #12]	; (8007950 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000050 	.word	0x20000050

08007954 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2243      	movs	r2, #67	; 0x43
 8007960:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007962:	4b03      	ldr	r3, [pc, #12]	; (8007970 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	200000d8 	.word	0x200000d8

08007974 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	220a      	movs	r2, #10
 8007980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007982:	4b03      	ldr	r3, [pc, #12]	; (8007990 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	2000000c 	.word	0x2000000c

08007994 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800799e:	2302      	movs	r3, #2
 80079a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079de:	88fa      	ldrh	r2, [r7, #6]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr

080079f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01c      	beq.n	8007a6c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d115      	bne.n	8007a68 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2181      	movs	r1, #129	; 0x81
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fcd7 	bl	8009412 <USBD_LL_Transmit>

      return USBD_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e002      	b.n	8007a6e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a6c:	2302      	movs	r3, #2
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d017      	beq.n	8007ac0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7c1b      	ldrb	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d109      	bne.n	8007aac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fcd7 	bl	8009458 <USBD_LL_PrepareReceive>
 8007aaa:	e007      	b.n	8007abc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ab2:	2340      	movs	r3, #64	; 0x40
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fcce 	bl	8009458 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e000      	b.n	8007ac2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e01a      	b.n	8007b18 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	79fa      	ldrb	r2, [r7, #7]
 8007b0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f001 fb3b 	bl	800918c <USBD_LL_Init>

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d006      	beq.n	8007b42 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73fb      	strb	r3, [r7, #15]
 8007b40:	e001      	b.n	8007b46 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b42:	2302      	movs	r3, #2
 8007b44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr

08007b52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fb70 	bl	8009240 <USBD_LL_Start>

  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr

08007b7e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00c      	beq.n	8007bb2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 fed8 	bl	80089aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c08:	461a      	mov	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d016      	beq.n	8007c4c <USBD_LL_SetupStage+0x6a>
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d81c      	bhi.n	8007c5c <USBD_LL_SetupStage+0x7a>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <USBD_LL_SetupStage+0x4a>
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d008      	beq.n	8007c3c <USBD_LL_SetupStage+0x5a>
 8007c2a:	e017      	b.n	8007c5c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9cb 	bl	8007fd0 <USBD_StdDevReq>
      break;
 8007c3a:	e01a      	b.n	8007c72 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fa2d 	bl	80080a4 <USBD_StdItfReq>
      break;
 8007c4a:	e012      	b.n	8007c72 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa6d 	bl	8008134 <USBD_StdEPReq>
      break;
 8007c5a:	e00a      	b.n	8007c72 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fb48 	bl	8009300 <USBD_LL_StallEP>
      break;
 8007c70:	bf00      	nop
  }

  return USBD_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	460b      	mov	r3, r1
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d14b      	bne.n	8007d28 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d134      	bne.n	8007d0c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d919      	bls.n	8007ce2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d203      	bcs.n	8007cd0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	e002      	b.n	8007cd6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 ff57 	bl	8008b8e <USBD_CtlContinueRx>
 8007ce0:	e038      	b.n	8007d54 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d105      	bne.n	8007d04 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 ff54 	bl	8008bb2 <USBD_CtlSendStatus>
 8007d0a:	e023      	b.n	8007d54 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d11e      	bne.n	8007d54 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 faed 	bl	8009300 <USBD_LL_StallEP>
 8007d26:	e015      	b.n	8007d54 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00d      	beq.n	8007d50 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d108      	bne.n	8007d50 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	7afa      	ldrb	r2, [r7, #11]
 8007d48:	4611      	mov	r1, r2
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	4798      	blx	r3
 8007d4e:	e001      	b.n	8007d54 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d50:	2302      	movs	r3, #2
 8007d52:	e000      	b.n	8007d56 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	460b      	mov	r3, r1
 8007d68:	607a      	str	r2, [r7, #4]
 8007d6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d17f      	bne.n	8007e72 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3314      	adds	r3, #20
 8007d76:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d15c      	bne.n	8007e3c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d915      	bls.n	8007dba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fec1 	bl	8008b2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dac:	2300      	movs	r3, #0
 8007dae:	2200      	movs	r2, #0
 8007db0:	2100      	movs	r1, #0
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f001 fb50 	bl	8009458 <USBD_LL_PrepareReceive>
 8007db8:	e04e      	b.n	8007e58 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	6912      	ldr	r2, [r2, #16]
 8007dc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc6:	fb01 f202 	mul.w	r2, r1, r2
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d11c      	bne.n	8007e0a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d316      	bcc.n	8007e0a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d20f      	bcs.n	8007e0a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fe9d 	bl	8008b2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f001 fb28 	bl	8009458 <USBD_LL_PrepareReceive>
 8007e08:	e026      	b.n	8007e58 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d105      	bne.n	8007e2c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007e2c:	2180      	movs	r1, #128	; 0x80
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f001 fa66 	bl	8009300 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 fecf 	bl	8008bd8 <USBD_CtlReceiveStatus>
 8007e3a:	e00d      	b.n	8007e58 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d004      	beq.n	8007e50 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e50:	2180      	movs	r1, #128	; 0x80
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f001 fa54 	bl	8009300 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d11d      	bne.n	8007e9e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff fe81 	bl	8007b6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e70:	e015      	b.n	8007e9e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00d      	beq.n	8007e9a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d108      	bne.n	8007e9a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	7afa      	ldrb	r2, [r7, #11]
 8007e92:	4611      	mov	r1, r2
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	4798      	blx	r3
 8007e98:	e001      	b.n	8007e9e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e000      	b.n	8007ea0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eb0:	2340      	movs	r3, #64	; 0x40
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 f9dd 	bl	8009276 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2240      	movs	r2, #64	; 0x40
 8007ec8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ecc:	2340      	movs	r3, #64	; 0x40
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2180      	movs	r1, #128	; 0x80
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 f9cf 	bl	8009276 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2240      	movs	r2, #64	; 0x40
 8007ee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6852      	ldr	r2, [r2, #4]
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr

08007f48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2204      	movs	r2, #4
 8007f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d105      	bne.n	8007f8e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr

08007f9a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d10b      	bne.n	8007fc4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fe6:	2b40      	cmp	r3, #64	; 0x40
 8007fe8:	d005      	beq.n	8007ff6 <USBD_StdDevReq+0x26>
 8007fea:	2b40      	cmp	r3, #64	; 0x40
 8007fec:	d84f      	bhi.n	800808e <USBD_StdDevReq+0xbe>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <USBD_StdDevReq+0x36>
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d14b      	bne.n	800808e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
      break;
 8008004:	e048      	b.n	8008098 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b09      	cmp	r3, #9
 800800c:	d839      	bhi.n	8008082 <USBD_StdDevReq+0xb2>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBD_StdDevReq+0x44>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008065 	.word	0x08008065
 8008018:	08008079 	.word	0x08008079
 800801c:	08008083 	.word	0x08008083
 8008020:	0800806f 	.word	0x0800806f
 8008024:	08008083 	.word	0x08008083
 8008028:	08008047 	.word	0x08008047
 800802c:	0800803d 	.word	0x0800803d
 8008030:	08008083 	.word	0x08008083
 8008034:	0800805b 	.word	0x0800805b
 8008038:	08008051 	.word	0x08008051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9dc 	bl	80083fc <USBD_GetDescriptor>
          break;
 8008044:	e022      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fb3f 	bl	80086cc <USBD_SetAddress>
          break;
 800804e:	e01d      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fb7e 	bl	8008754 <USBD_SetConfig>
          break;
 8008058:	e018      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc07 	bl	8008870 <USBD_GetConfig>
          break;
 8008062:	e013      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fc37 	bl	80088da <USBD_GetStatus>
          break;
 800806c:	e00e      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc65 	bl	8008940 <USBD_SetFeature>
          break;
 8008076:	e009      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fc74 	bl	8008968 <USBD_ClrFeature>
          break;
 8008080:	e004      	b.n	800808c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fccc 	bl	8008a22 <USBD_CtlError>
          break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e004      	b.n	8008098 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fcc6 	bl	8008a22 <USBD_CtlError>
      break;
 8008096:	bf00      	nop
  }

  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop

080080a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d005      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d82e      	bhi.n	8008120 <USBD_StdItfReq+0x7c>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d12a      	bne.n	8008120 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d0:	3b01      	subs	r3, #1
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d81d      	bhi.n	8008112 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	889b      	ldrh	r3, [r3, #4]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d813      	bhi.n	8008108 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	88db      	ldrh	r3, [r3, #6]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d110      	bne.n	800811c <USBD_StdItfReq+0x78>
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10d      	bne.n	800811c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fd56 	bl	8008bb2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008106:	e009      	b.n	800811c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fc89 	bl	8008a22 <USBD_CtlError>
          break;
 8008110:	e004      	b.n	800811c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fc84 	bl	8008a22 <USBD_CtlError>
          break;
 800811a:	e000      	b.n	800811e <USBD_StdItfReq+0x7a>
          break;
 800811c:	bf00      	nop
      }
      break;
 800811e:	e004      	b.n	800812a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fc7d 	bl	8008a22 <USBD_CtlError>
      break;
 8008128:	bf00      	nop
  }

  return USBD_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	889b      	ldrh	r3, [r3, #4]
 8008146:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d007      	beq.n	8008164 <USBD_StdEPReq+0x30>
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	f200 8146 	bhi.w	80083e6 <USBD_StdEPReq+0x2b2>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <USBD_StdEPReq+0x40>
 800815e:	2b20      	cmp	r3, #32
 8008160:	f040 8141 	bne.w	80083e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
      break;
 8008172:	e13d      	b.n	80083f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800817c:	2b20      	cmp	r3, #32
 800817e:	d10a      	bne.n	8008196 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	e12d      	b.n	80083f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b03      	cmp	r3, #3
 800819c:	d007      	beq.n	80081ae <USBD_StdEPReq+0x7a>
 800819e:	2b03      	cmp	r3, #3
 80081a0:	f300 811b 	bgt.w	80083da <USBD_StdEPReq+0x2a6>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d072      	beq.n	800828e <USBD_StdEPReq+0x15a>
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d03a      	beq.n	8008222 <USBD_StdEPReq+0xee>
 80081ac:	e115      	b.n	80083da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d002      	beq.n	80081be <USBD_StdEPReq+0x8a>
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d015      	beq.n	80081e8 <USBD_StdEPReq+0xb4>
 80081bc:	e02b      	b.n	8008216 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00c      	beq.n	80081de <USBD_StdEPReq+0xaa>
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b80      	cmp	r3, #128	; 0x80
 80081c8:	d009      	beq.n	80081de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 f896 	bl	8009300 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081d4:	2180      	movs	r1, #128	; 0x80
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 f892 	bl	8009300 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081dc:	e020      	b.n	8008220 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fc1e 	bl	8008a22 <USBD_CtlError>
              break;
 80081e6:	e01b      	b.n	8008220 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	885b      	ldrh	r3, [r3, #2]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10e      	bne.n	800820e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <USBD_StdEPReq+0xda>
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b80      	cmp	r3, #128	; 0x80
 80081fa:	d008      	beq.n	800820e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	88db      	ldrh	r3, [r3, #6]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f879 	bl	8009300 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fccf 	bl	8008bb2 <USBD_CtlSendStatus>

              break;
 8008214:	e004      	b.n	8008220 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc02 	bl	8008a22 <USBD_CtlError>
              break;
 800821e:	bf00      	nop
          }
          break;
 8008220:	e0e0      	b.n	80083e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008228:	2b02      	cmp	r3, #2
 800822a:	d002      	beq.n	8008232 <USBD_StdEPReq+0xfe>
 800822c:	2b03      	cmp	r3, #3
 800822e:	d015      	beq.n	800825c <USBD_StdEPReq+0x128>
 8008230:	e026      	b.n	8008280 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <USBD_StdEPReq+0x11e>
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	2b80      	cmp	r3, #128	; 0x80
 800823c:	d009      	beq.n	8008252 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 f85c 	bl	8009300 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008248:	2180      	movs	r1, #128	; 0x80
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f858 	bl	8009300 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008250:	e01c      	b.n	800828c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fbe4 	bl	8008a22 <USBD_CtlError>
              break;
 800825a:	e017      	b.n	800828c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d112      	bne.n	800828a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 f863 	bl	800933e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc9a 	bl	8008bb2 <USBD_CtlSendStatus>
              }
              break;
 800827e:	e004      	b.n	800828a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fbcd 	bl	8008a22 <USBD_CtlError>
              break;
 8008288:	e000      	b.n	800828c <USBD_StdEPReq+0x158>
              break;
 800828a:	bf00      	nop
          }
          break;
 800828c:	e0aa      	b.n	80083e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008294:	2b02      	cmp	r3, #2
 8008296:	d002      	beq.n	800829e <USBD_StdEPReq+0x16a>
 8008298:	2b03      	cmp	r3, #3
 800829a:	d032      	beq.n	8008302 <USBD_StdEPReq+0x1ce>
 800829c:	e097      	b.n	80083ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <USBD_StdEPReq+0x180>
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b80      	cmp	r3, #128	; 0x80
 80082a8:	d004      	beq.n	80082b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fbb8 	bl	8008a22 <USBD_CtlError>
                break;
 80082b2:	e091      	b.n	80083d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	da0b      	bge.n	80082d4 <USBD_StdEPReq+0x1a0>
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	3310      	adds	r3, #16
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	4413      	add	r3, r2
 80082d0:	3304      	adds	r3, #4
 80082d2:	e00b      	b.n	80082ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	4413      	add	r3, r2
 80082ea:	3304      	adds	r3, #4
 80082ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2202      	movs	r2, #2
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fbfb 	bl	8008af6 <USBD_CtlSendData>
              break;
 8008300:	e06a      	b.n	80083d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da11      	bge.n	800832e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	f003 020f 	and.w	r2, r3, #15
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3318      	adds	r3, #24
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d117      	bne.n	8008354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fb7b 	bl	8008a22 <USBD_CtlError>
                  break;
 800832c:	e054      	b.n	80083d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d104      	bne.n	8008354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fb68 	bl	8008a22 <USBD_CtlError>
                  break;
 8008352:	e041      	b.n	80083d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008358:	2b00      	cmp	r3, #0
 800835a:	da0b      	bge.n	8008374 <USBD_StdEPReq+0x240>
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	3310      	adds	r3, #16
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	4413      	add	r3, r2
 8008370:	3304      	adds	r3, #4
 8008372:	e00b      	b.n	800838c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
 800838a:	3304      	adds	r3, #4
 800838c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <USBD_StdEPReq+0x266>
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b80      	cmp	r3, #128	; 0x80
 8008398:	d103      	bne.n	80083a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	e00e      	b.n	80083c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 ffe8 	bl	800937c <USBD_LL_IsStallEP>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2201      	movs	r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e002      	b.n	80083c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2202      	movs	r2, #2
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fb95 	bl	8008af6 <USBD_CtlSendData>
              break;
 80083cc:	e004      	b.n	80083d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fb26 	bl	8008a22 <USBD_CtlError>
              break;
 80083d6:	bf00      	nop
          }
          break;
 80083d8:	e004      	b.n	80083e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fb20 	bl	8008a22 <USBD_CtlError>
          break;
 80083e2:	bf00      	nop
      }
      break;
 80083e4:	e004      	b.n	80083f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb1a 	bl	8008a22 <USBD_CtlError>
      break;
 80083ee:	bf00      	nop
  }

  return ret;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	885b      	ldrh	r3, [r3, #2]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	2b06      	cmp	r3, #6
 800841e:	f200 8128 	bhi.w	8008672 <USBD_GetDescriptor+0x276>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <USBD_GetDescriptor+0x2c>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008445 	.word	0x08008445
 800842c:	0800845d 	.word	0x0800845d
 8008430:	0800849d 	.word	0x0800849d
 8008434:	08008673 	.word	0x08008673
 8008438:	08008673 	.word	0x08008673
 800843c:	08008613 	.word	0x08008613
 8008440:	0800863f 	.word	0x0800863f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7c12      	ldrb	r2, [r2, #16]
 8008450:	f107 0108 	add.w	r1, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
      break;
 800845a:	e112      	b.n	8008682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7c1b      	ldrb	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10d      	bne.n	8008480 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846c:	f107 0208 	add.w	r2, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	2202      	movs	r2, #2
 800847c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800847e:	e100      	b.n	8008682 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	f107 0208 	add.w	r2, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	2202      	movs	r2, #2
 8008498:	701a      	strb	r2, [r3, #0]
      break;
 800849a:	e0f2      	b.n	8008682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	885b      	ldrh	r3, [r3, #2]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	f200 80ac 	bhi.w	8008600 <USBD_GetDescriptor+0x204>
 80084a8:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <USBD_GetDescriptor+0xb4>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084fd 	.word	0x080084fd
 80084b8:	08008531 	.word	0x08008531
 80084bc:	08008565 	.word	0x08008565
 80084c0:	08008599 	.word	0x08008599
 80084c4:	080085cd 	.word	0x080085cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ea:	e091      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa97 	bl	8008a22 <USBD_CtlError>
            err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
          break;
 80084fa:	e089      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7c12      	ldrb	r2, [r2, #16]
 8008514:	f107 0108 	add.w	r1, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851e:	e077      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa7d 	bl	8008a22 <USBD_CtlError>
            err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
          break;
 800852e:	e06f      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008552:	e05d      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa63 	bl	8008a22 <USBD_CtlError>
            err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
          break;
 8008562:	e055      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	7c12      	ldrb	r2, [r2, #16]
 800857c:	f107 0108 	add.w	r1, r7, #8
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
 8008584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008586:	e043      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa49 	bl	8008a22 <USBD_CtlError>
            err++;
 8008590:	7afb      	ldrb	r3, [r7, #11]
 8008592:	3301      	adds	r3, #1
 8008594:	72fb      	strb	r3, [r7, #11]
          break;
 8008596:	e03b      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7c12      	ldrb	r2, [r2, #16]
 80085b0:	f107 0108 	add.w	r1, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ba:	e029      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa2f 	bl	8008a22 <USBD_CtlError>
            err++;
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	3301      	adds	r3, #1
 80085c8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ca:	e021      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	7c12      	ldrb	r2, [r2, #16]
 80085e4:	f107 0108 	add.w	r1, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ee:	e00f      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa15 	bl	8008a22 <USBD_CtlError>
            err++;
 80085f8:	7afb      	ldrb	r3, [r7, #11]
 80085fa:	3301      	adds	r3, #1
 80085fc:	72fb      	strb	r3, [r7, #11]
          break;
 80085fe:	e007      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa0d 	bl	8008a22 <USBD_CtlError>
          err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800860e:	e038      	b.n	8008682 <USBD_GetDescriptor+0x286>
 8008610:	e037      	b.n	8008682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7c1b      	ldrb	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008622:	f107 0208 	add.w	r2, r7, #8
 8008626:	4610      	mov	r0, r2
 8008628:	4798      	blx	r3
 800862a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800862c:	e029      	b.n	8008682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f9f6 	bl	8008a22 <USBD_CtlError>
        err++;
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	3301      	adds	r3, #1
 800863a:	72fb      	strb	r3, [r7, #11]
      break;
 800863c:	e021      	b.n	8008682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	7c1b      	ldrb	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10d      	bne.n	8008662 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	f107 0208 	add.w	r2, r7, #8
 8008652:	4610      	mov	r0, r2
 8008654:	4798      	blx	r3
 8008656:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	2207      	movs	r2, #7
 800865e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008660:	e00f      	b.n	8008682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f9dc 	bl	8008a22 <USBD_CtlError>
        err++;
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	3301      	adds	r3, #1
 800866e:	72fb      	strb	r3, [r7, #11]
      break;
 8008670:	e007      	b.n	8008682 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f9d4 	bl	8008a22 <USBD_CtlError>
      err++;
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	3301      	adds	r3, #1
 800867e:	72fb      	strb	r3, [r7, #11]
      break;
 8008680:	bf00      	nop
  }

  if (err != 0U)
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11c      	bne.n	80086c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008688:	893b      	ldrh	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d011      	beq.n	80086b2 <USBD_GetDescriptor+0x2b6>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	88db      	ldrh	r3, [r3, #6]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00d      	beq.n	80086b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	88da      	ldrh	r2, [r3, #6]
 800869a:	893b      	ldrh	r3, [r7, #8]
 800869c:	4293      	cmp	r3, r2
 800869e:	bf28      	it	cs
 80086a0:	4613      	movcs	r3, r2
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086a6:	893b      	ldrh	r3, [r7, #8]
 80086a8:	461a      	mov	r2, r3
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fa22 	bl	8008af6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	88db      	ldrh	r3, [r3, #6]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fa79 	bl	8008bb2 <USBD_CtlSendStatus>
 80086c0:	e000      	b.n	80086c4 <USBD_GetDescriptor+0x2c8>
    return;
 80086c2:	bf00      	nop
    }
  }
}
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop

080086cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	889b      	ldrh	r3, [r3, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d130      	bne.n	8008740 <USBD_SetAddress+0x74>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	88db      	ldrh	r3, [r3, #6]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d12c      	bne.n	8008740 <USBD_SetAddress+0x74>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	885b      	ldrh	r3, [r3, #2]
 80086ea:	2b7f      	cmp	r3, #127	; 0x7f
 80086ec:	d828      	bhi.n	8008740 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	885b      	ldrh	r3, [r3, #2]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008700:	2b03      	cmp	r3, #3
 8008702:	d104      	bne.n	800870e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f98b 	bl	8008a22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870c:	e01d      	b.n	800874a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7bfa      	ldrb	r2, [r7, #15]
 8008712:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fe5a 	bl	80093d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa46 	bl	8008bb2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d004      	beq.n	8008736 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008734:	e009      	b.n	800874a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873e:	e004      	b.n	800874a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f96d 	bl	8008a22 <USBD_CtlError>
  }
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b41      	ldr	r3, [pc, #260]	; (800886c <USBD_SetConfig+0x118>)
 8008766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008768:	4b40      	ldr	r3, [pc, #256]	; (800886c <USBD_SetConfig+0x118>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d904      	bls.n	800877a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f955 	bl	8008a22 <USBD_CtlError>
 8008778:	e075      	b.n	8008866 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008780:	2b02      	cmp	r3, #2
 8008782:	d002      	beq.n	800878a <USBD_SetConfig+0x36>
 8008784:	2b03      	cmp	r3, #3
 8008786:	d023      	beq.n	80087d0 <USBD_SetConfig+0x7c>
 8008788:	e062      	b.n	8008850 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800878a:	4b38      	ldr	r3, [pc, #224]	; (800886c <USBD_SetConfig+0x118>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01a      	beq.n	80087c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008792:	4b36      	ldr	r3, [pc, #216]	; (800886c <USBD_SetConfig+0x118>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2203      	movs	r2, #3
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087a4:	4b31      	ldr	r3, [pc, #196]	; (800886c <USBD_SetConfig+0x118>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff f9e7 	bl	8007b7e <USBD_SetClassConfig>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d104      	bne.n	80087c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f932 	bl	8008a22 <USBD_CtlError>
            return;
 80087be:	e052      	b.n	8008866 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f9f6 	bl	8008bb2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087c6:	e04e      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9f2 	bl	8008bb2 <USBD_CtlSendStatus>
        break;
 80087ce:	e04a      	b.n	8008866 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80087d0:	4b26      	ldr	r3, [pc, #152]	; (800886c <USBD_SetConfig+0x118>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d112      	bne.n	80087fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <USBD_SetConfig+0x118>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80087ea:	4b20      	ldr	r3, [pc, #128]	; (800886c <USBD_SetConfig+0x118>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff f9e3 	bl	8007bbc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f9db 	bl	8008bb2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087fc:	e033      	b.n	8008866 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80087fe:	4b1b      	ldr	r3, [pc, #108]	; (800886c <USBD_SetConfig+0x118>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d01d      	beq.n	8008848 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff f9d1 	bl	8007bbc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800881a:	4b14      	ldr	r3, [pc, #80]	; (800886c <USBD_SetConfig+0x118>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008824:	4b11      	ldr	r3, [pc, #68]	; (800886c <USBD_SetConfig+0x118>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff f9a7 	bl	8007b7e <USBD_SetClassConfig>
 8008830:	4603      	mov	r3, r0
 8008832:	2b02      	cmp	r3, #2
 8008834:	d104      	bne.n	8008840 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f8f2 	bl	8008a22 <USBD_CtlError>
            return;
 800883e:	e012      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9b6 	bl	8008bb2 <USBD_CtlSendStatus>
        break;
 8008846:	e00e      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9b2 	bl	8008bb2 <USBD_CtlSendStatus>
        break;
 800884e:	e00a      	b.n	8008866 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f8e5 	bl	8008a22 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008858:	4b04      	ldr	r3, [pc, #16]	; (800886c <USBD_SetConfig+0x118>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff f9ac 	bl	8007bbc <USBD_ClrClassConfig>
        break;
 8008864:	bf00      	nop
    }
  }
}
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000338 	.word	0x20000338

08008870 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88db      	ldrh	r3, [r3, #6]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d004      	beq.n	800888c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f8cc 	bl	8008a22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800888a:	e022      	b.n	80088d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008892:	2b02      	cmp	r3, #2
 8008894:	dc02      	bgt.n	800889c <USBD_GetConfig+0x2c>
 8008896:	2b00      	cmp	r3, #0
 8008898:	dc03      	bgt.n	80088a2 <USBD_GetConfig+0x32>
 800889a:	e015      	b.n	80088c8 <USBD_GetConfig+0x58>
 800889c:	2b03      	cmp	r3, #3
 800889e:	d00b      	beq.n	80088b8 <USBD_GetConfig+0x48>
 80088a0:	e012      	b.n	80088c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3308      	adds	r3, #8
 80088ac:	2201      	movs	r2, #1
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f920 	bl	8008af6 <USBD_CtlSendData>
        break;
 80088b6:	e00c      	b.n	80088d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	2201      	movs	r2, #1
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f918 	bl	8008af6 <USBD_CtlSendData>
        break;
 80088c6:	e004      	b.n	80088d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8a9 	bl	8008a22 <USBD_CtlError>
        break;
 80088d0:	bf00      	nop
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ea:	3b01      	subs	r3, #1
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d81e      	bhi.n	800892e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	88db      	ldrh	r3, [r3, #6]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d004      	beq.n	8008902 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f891 	bl	8008a22 <USBD_CtlError>
        break;
 8008900:	e01a      	b.n	8008938 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f043 0202 	orr.w	r2, r3, #2
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	330c      	adds	r3, #12
 8008922:	2202      	movs	r2, #2
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f8e5 	bl	8008af6 <USBD_CtlSendData>
      break;
 800892c:	e004      	b.n	8008938 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f876 	bl	8008a22 <USBD_CtlError>
      break;
 8008936:	bf00      	nop
  }
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d106      	bne.n	8008960 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f929 	bl	8008bb2 <USBD_CtlSendStatus>
  }
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008978:	3b01      	subs	r3, #1
 800897a:	2b02      	cmp	r3, #2
 800897c:	d80b      	bhi.n	8008996 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d10c      	bne.n	80089a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f90f 	bl	8008bb2 <USBD_CtlSendStatus>
      }
      break;
 8008994:	e004      	b.n	80089a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f842 	bl	8008a22 <USBD_CtlError>
      break;
 800899e:	e000      	b.n	80089a2 <USBD_ClrFeature+0x3a>
      break;
 80089a0:	bf00      	nop
  }
}
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	785a      	ldrb	r2, [r3, #1]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3302      	adds	r3, #2
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	3303      	adds	r3, #3
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4413      	add	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	3304      	adds	r3, #4
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	3305      	adds	r3, #5
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	021b      	lsls	r3, r3, #8
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	4413      	add	r3, r2
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	3306      	adds	r3, #6
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	3307      	adds	r3, #7
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4413      	add	r3, r2
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	80da      	strh	r2, [r3, #6]

}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bc80      	pop	{r7}
 8008a20:	4770      	bx	lr

08008a22 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008a2c:	2180      	movs	r1, #128	; 0x80
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fc66 	bl	8009300 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008a34:	2100      	movs	r1, #0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fc62 	bl	8009300 <USBD_LL_StallEP>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d032      	beq.n	8008ac0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f834 	bl	8008ac8 <USBD_GetLen>
 8008a60:	4603      	mov	r3, r0
 8008a62:	3301      	adds	r3, #1
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	75fa      	strb	r2, [r7, #23]
 8008a74:	461a      	mov	r2, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	4413      	add	r3, r2
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	7812      	ldrb	r2, [r2, #0]
 8008a7e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	75fa      	strb	r2, [r7, #23]
 8008a86:	461a      	mov	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a90:	e012      	b.n	8008ab8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	60fa      	str	r2, [r7, #12]
 8008a98:	7dfa      	ldrb	r2, [r7, #23]
 8008a9a:	1c51      	adds	r1, r2, #1
 8008a9c:	75f9      	strb	r1, [r7, #23]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	75fa      	strb	r2, [r7, #23]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e8      	bne.n	8008a92 <USBD_GetString+0x4e>
    }
  }
}
 8008ac0:	bf00      	nop
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008ad4:	e005      	b.n	8008ae2 <USBD_GetLen+0x1a>
  {
    len++;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1f5      	bne.n	8008ad6 <USBD_GetLen+0xe>
  }

  return len;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr

08008af6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	4613      	mov	r3, r2
 8008b02:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b0c:	88fa      	ldrh	r2, [r7, #6]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b12:	88fa      	ldrh	r2, [r7, #6]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b18:	88fb      	ldrh	r3, [r7, #6]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 fc77 	bl	8009412 <USBD_LL_Transmit>

  return USBD_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	2100      	movs	r1, #0
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 fc65 	bl	8009412 <USBD_LL_Transmit>

  return USBD_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2203      	movs	r2, #3
 8008b64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b68:	88fa      	ldrh	r2, [r7, #6]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b70:	88fa      	ldrh	r2, [r7, #6]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b78:	88fb      	ldrh	r3, [r7, #6]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 fc6a 	bl	8009458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b9c:	88fb      	ldrh	r3, [r7, #6]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fc58 	bl	8009458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2204      	movs	r2, #4
 8008bbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc22 	bl	8009412 <USBD_LL_Transmit>

  return USBD_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2205      	movs	r2, #5
 8008be4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008be8:	2300      	movs	r3, #0
 8008bea:	2200      	movs	r2, #0
 8008bec:	2100      	movs	r1, #0
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fc32 	bl	8009458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c04:	2200      	movs	r2, #0
 8008c06:	4912      	ldr	r1, [pc, #72]	; (8008c50 <MX_USB_DEVICE_Init+0x50>)
 8008c08:	4812      	ldr	r0, [pc, #72]	; (8008c54 <MX_USB_DEVICE_Init+0x54>)
 8008c0a:	f7fe ff5e 	bl	8007aca <USBD_Init>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c14:	f7f8 f81a 	bl	8000c4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c18:	490f      	ldr	r1, [pc, #60]	; (8008c58 <MX_USB_DEVICE_Init+0x58>)
 8008c1a:	480e      	ldr	r0, [pc, #56]	; (8008c54 <MX_USB_DEVICE_Init+0x54>)
 8008c1c:	f7fe ff80 	bl	8007b20 <USBD_RegisterClass>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c26:	f7f8 f811 	bl	8000c4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c2a:	490c      	ldr	r1, [pc, #48]	; (8008c5c <MX_USB_DEVICE_Init+0x5c>)
 8008c2c:	4809      	ldr	r0, [pc, #36]	; (8008c54 <MX_USB_DEVICE_Init+0x54>)
 8008c2e:	f7fe feb1 	bl	8007994 <USBD_CDC_RegisterInterface>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c38:	f7f8 f808 	bl	8000c4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c3c:	4805      	ldr	r0, [pc, #20]	; (8008c54 <MX_USB_DEVICE_Init+0x54>)
 8008c3e:	f7fe ff88 	bl	8007b52 <USBD_Start>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c48:	f7f8 f800 	bl	8000c4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c4c:	bf00      	nop
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	2000012c 	.word	0x2000012c
 8008c54:	2000033c 	.word	0x2000033c
 8008c58:	20000018 	.word	0x20000018
 8008c5c:	2000011c 	.word	0x2000011c

08008c60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c64:	2200      	movs	r2, #0
 8008c66:	4905      	ldr	r1, [pc, #20]	; (8008c7c <CDC_Init_FS+0x1c>)
 8008c68:	4805      	ldr	r0, [pc, #20]	; (8008c80 <CDC_Init_FS+0x20>)
 8008c6a:	f7fe fea9 	bl	80079c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c6e:	4905      	ldr	r1, [pc, #20]	; (8008c84 <CDC_Init_FS+0x24>)
 8008c70:	4803      	ldr	r0, [pc, #12]	; (8008c80 <CDC_Init_FS+0x20>)
 8008c72:	f7fe febe 	bl	80079f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20000a04 	.word	0x20000a04
 8008c80:	2000033c 	.word	0x2000033c
 8008c84:	20000604 	.word	0x20000604

08008c88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	4770      	bx	lr
	...

08008c98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	71fb      	strb	r3, [r7, #7]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	2b23      	cmp	r3, #35	; 0x23
 8008cac:	d84a      	bhi.n	8008d44 <CDC_Control_FS+0xac>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <CDC_Control_FS+0x1c>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008d45 	.word	0x08008d45
 8008cb8:	08008d45 	.word	0x08008d45
 8008cbc:	08008d45 	.word	0x08008d45
 8008cc0:	08008d45 	.word	0x08008d45
 8008cc4:	08008d45 	.word	0x08008d45
 8008cc8:	08008d45 	.word	0x08008d45
 8008ccc:	08008d45 	.word	0x08008d45
 8008cd0:	08008d45 	.word	0x08008d45
 8008cd4:	08008d45 	.word	0x08008d45
 8008cd8:	08008d45 	.word	0x08008d45
 8008cdc:	08008d45 	.word	0x08008d45
 8008ce0:	08008d45 	.word	0x08008d45
 8008ce4:	08008d45 	.word	0x08008d45
 8008ce8:	08008d45 	.word	0x08008d45
 8008cec:	08008d45 	.word	0x08008d45
 8008cf0:	08008d45 	.word	0x08008d45
 8008cf4:	08008d45 	.word	0x08008d45
 8008cf8:	08008d45 	.word	0x08008d45
 8008cfc:	08008d45 	.word	0x08008d45
 8008d00:	08008d45 	.word	0x08008d45
 8008d04:	08008d45 	.word	0x08008d45
 8008d08:	08008d45 	.word	0x08008d45
 8008d0c:	08008d45 	.word	0x08008d45
 8008d10:	08008d45 	.word	0x08008d45
 8008d14:	08008d45 	.word	0x08008d45
 8008d18:	08008d45 	.word	0x08008d45
 8008d1c:	08008d45 	.word	0x08008d45
 8008d20:	08008d45 	.word	0x08008d45
 8008d24:	08008d45 	.word	0x08008d45
 8008d28:	08008d45 	.word	0x08008d45
 8008d2c:	08008d45 	.word	0x08008d45
 8008d30:	08008d45 	.word	0x08008d45
 8008d34:	08008d45 	.word	0x08008d45
 8008d38:	08008d45 	.word	0x08008d45
 8008d3c:	08008d45 	.word	0x08008d45
 8008d40:	08008d45 	.word	0x08008d45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d44:	bf00      	nop
  }

  return (USBD_OK);
 8008d46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop

08008d54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len == 2) {
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d10b      	bne.n	8008d7e <CDC_Receive_FS+0x2a>
			// Преобразуем 2 байта в число типа int16_t
			receive = (int16_t) (Buf[0] | (Buf[1] << 8)); // Little-endian
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	b21a      	sxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	021b      	lsls	r3, r3, #8
 8008d74:	b21b      	sxth	r3, r3
 8008d76:	4313      	orrs	r3, r2
 8008d78:	b21a      	sxth	r2, r3
 8008d7a:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <CDC_Receive_FS+0x44>)
 8008d7c:	801a      	strh	r2, [r3, #0]
		}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	4806      	ldr	r0, [pc, #24]	; (8008d9c <CDC_Receive_FS+0x48>)
 8008d82:	f7fe fe36 	bl	80079f2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d86:	4805      	ldr	r0, [pc, #20]	; (8008d9c <CDC_Receive_FS+0x48>)
 8008d88:	f7fe fe75 	bl	8007a76 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008d8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20000600 	.word	0x20000600
 8008d9c:	2000033c 	.word	0x2000033c

08008da0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008db0:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <CDC_Transmit_FS+0x48>)
 8008db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e00b      	b.n	8008dde <CDC_Transmit_FS+0x3e>
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008dc6:	887b      	ldrh	r3, [r7, #2]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4806      	ldr	r0, [pc, #24]	; (8008de8 <CDC_Transmit_FS+0x48>)
 8008dce:	f7fe fdf7 	bl	80079c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008dd2:	4805      	ldr	r0, [pc, #20]	; (8008de8 <CDC_Transmit_FS+0x48>)
 8008dd4:	f7fe fe20 	bl	8007a18 <USBD_CDC_TransmitPacket>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	2000033c 	.word	0x2000033c

08008dec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	6039      	str	r1, [r7, #0]
 8008df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2212      	movs	r2, #18
 8008dfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008dfe:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bc80      	pop	{r7}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20000148 	.word	0x20000148

08008e10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	6039      	str	r1, [r7, #0]
 8008e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2204      	movs	r2, #4
 8008e20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e22:	4b03      	ldr	r3, [pc, #12]	; (8008e30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bc80      	pop	{r7}
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	2000015c 	.word	0x2000015c

08008e34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	6039      	str	r1, [r7, #0]
 8008e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d105      	bne.n	8008e52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	4907      	ldr	r1, [pc, #28]	; (8008e68 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e4a:	4808      	ldr	r0, [pc, #32]	; (8008e6c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e4c:	f7ff fdfa 	bl	8008a44 <USBD_GetString>
 8008e50:	e004      	b.n	8008e5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	4904      	ldr	r1, [pc, #16]	; (8008e68 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e56:	4805      	ldr	r0, [pc, #20]	; (8008e6c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e58:	f7ff fdf4 	bl	8008a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000e04 	.word	0x20000e04
 8008e6c:	080095cc 	.word	0x080095cc

08008e70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	4904      	ldr	r1, [pc, #16]	; (8008e90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e80:	4804      	ldr	r0, [pc, #16]	; (8008e94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e82:	f7ff fddf 	bl	8008a44 <USBD_GetString>
  return USBD_StrDesc;
 8008e86:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000e04 	.word	0x20000e04
 8008e94:	080095e4 	.word	0x080095e4

08008e98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	221a      	movs	r2, #26
 8008ea8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eaa:	f000 f843 	bl	8008f34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008eae:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000160 	.word	0x20000160

08008ebc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	6039      	str	r1, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d105      	bne.n	8008eda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	4907      	ldr	r1, [pc, #28]	; (8008ef0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ed2:	4808      	ldr	r0, [pc, #32]	; (8008ef4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ed4:	f7ff fdb6 	bl	8008a44 <USBD_GetString>
 8008ed8:	e004      	b.n	8008ee4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	4904      	ldr	r1, [pc, #16]	; (8008ef0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ede:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ee0:	f7ff fdb0 	bl	8008a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ee4:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000e04 	.word	0x20000e04
 8008ef4:	080095f8 	.word	0x080095f8

08008ef8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d105      	bne.n	8008f16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	4907      	ldr	r1, [pc, #28]	; (8008f2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f0e:	4808      	ldr	r0, [pc, #32]	; (8008f30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f10:	f7ff fd98 	bl	8008a44 <USBD_GetString>
 8008f14:	e004      	b.n	8008f20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	4904      	ldr	r1, [pc, #16]	; (8008f2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f1a:	4805      	ldr	r0, [pc, #20]	; (8008f30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f1c:	f7ff fd92 	bl	8008a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f20:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000e04 	.word	0x20000e04
 8008f30:	08009604 	.word	0x08009604

08008f34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <Get_SerialNum+0x44>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f40:	4b0e      	ldr	r3, [pc, #56]	; (8008f7c <Get_SerialNum+0x48>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f46:	4b0e      	ldr	r3, [pc, #56]	; (8008f80 <Get_SerialNum+0x4c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d009      	beq.n	8008f6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f5a:	2208      	movs	r2, #8
 8008f5c:	4909      	ldr	r1, [pc, #36]	; (8008f84 <Get_SerialNum+0x50>)
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 f814 	bl	8008f8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f64:	2204      	movs	r2, #4
 8008f66:	4908      	ldr	r1, [pc, #32]	; (8008f88 <Get_SerialNum+0x54>)
 8008f68:	68b8      	ldr	r0, [r7, #8]
 8008f6a:	f000 f80f 	bl	8008f8c <IntToUnicode>
  }
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	1ffff7e8 	.word	0x1ffff7e8
 8008f7c:	1ffff7ec 	.word	0x1ffff7ec
 8008f80:	1ffff7f0 	.word	0x1ffff7f0
 8008f84:	20000162 	.word	0x20000162
 8008f88:	20000172 	.word	0x20000172

08008f8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	75fb      	strb	r3, [r7, #23]
 8008fa2:	e027      	b.n	8008ff4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	0f1b      	lsrs	r3, r3, #28
 8008fa8:	2b09      	cmp	r3, #9
 8008faa:	d80b      	bhi.n	8008fc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	0f1b      	lsrs	r3, r3, #28
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	440b      	add	r3, r1
 8008fbc:	3230      	adds	r2, #48	; 0x30
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	e00a      	b.n	8008fda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	0f1b      	lsrs	r3, r3, #28
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	4619      	mov	r1, r3
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	440b      	add	r3, r1
 8008fd4:	3237      	adds	r2, #55	; 0x37
 8008fd6:	b2d2      	uxtb	r2, r2
 8008fd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	4413      	add	r3, r2
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	75fb      	strb	r3, [r7, #23]
 8008ff4:	7dfa      	ldrb	r2, [r7, #23]
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d3d3      	bcc.n	8008fa4 <IntToUnicode+0x18>
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	bf00      	nop
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	bc80      	pop	{r7}
 8009006:	4770      	bx	lr

08009008 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a0d      	ldr	r2, [pc, #52]	; (800904c <HAL_PCD_MspInit+0x44>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d113      	bne.n	8009042 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800901a:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <HAL_PCD_MspInit+0x48>)
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	4a0c      	ldr	r2, [pc, #48]	; (8009050 <HAL_PCD_MspInit+0x48>)
 8009020:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009024:	61d3      	str	r3, [r2, #28]
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <HAL_PCD_MspInit+0x48>)
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009032:	2200      	movs	r2, #0
 8009034:	2100      	movs	r1, #0
 8009036:	2014      	movs	r0, #20
 8009038:	f7f8 fafb 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800903c:	2014      	movs	r0, #20
 800903e:	f7f8 fb14 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	40005c00 	.word	0x40005c00
 8009050:	40021000 	.word	0x40021000

08009054 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009068:	4619      	mov	r1, r3
 800906a:	4610      	mov	r0, r2
 800906c:	f7fe fdb9 	bl	8007be2 <USBD_LL_SetupStage>
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800908a:	78fa      	ldrb	r2, [r7, #3]
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	440b      	add	r3, r1
 8009098:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	4619      	mov	r1, r3
 80090a2:	f7fe fdeb 	bl	8007c7c <USBD_LL_DataOutStage>
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	440b      	add	r3, r1
 80090ce:	333c      	adds	r3, #60	; 0x3c
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	4619      	mov	r1, r3
 80090d6:	f7fe fe42 	bl	8007d5e <USBD_LL_DataInStage>
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe ff52 	bl	8007f9a <USBD_LL_SOF>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009106:	2301      	movs	r3, #1
 8009108:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d001      	beq.n	8009116 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009112:	f7f7 fd9b 	bl	8000c4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800911c:	7bfa      	ldrb	r2, [r7, #15]
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7fe ff02 	bl	8007f2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe febb 	bl	8007ea8 <USBD_LL_Reset>
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe fefc 	bl	8007f48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009158:	4b04      	ldr	r3, [pc, #16]	; (800916c <HAL_PCD_SuspendCallback+0x30>)
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	4a03      	ldr	r2, [pc, #12]	; (800916c <HAL_PCD_SuspendCallback+0x30>)
 800915e:	f043 0306 	orr.w	r3, r3, #6
 8009162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	e000ed00 	.word	0xe000ed00

08009170 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fef6 	bl	8007f70 <USBD_LL_Resume>
}
 8009184:	bf00      	nop
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009194:	4a28      	ldr	r2, [pc, #160]	; (8009238 <USBD_LL_Init+0xac>)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a26      	ldr	r2, [pc, #152]	; (8009238 <USBD_LL_Init+0xac>)
 80091a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <USBD_LL_Init+0xac>)
 80091a6:	4a25      	ldr	r2, [pc, #148]	; (800923c <USBD_LL_Init+0xb0>)
 80091a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091aa:	4b23      	ldr	r3, [pc, #140]	; (8009238 <USBD_LL_Init+0xac>)
 80091ac:	2208      	movs	r2, #8
 80091ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091b0:	4b21      	ldr	r3, [pc, #132]	; (8009238 <USBD_LL_Init+0xac>)
 80091b2:	2202      	movs	r2, #2
 80091b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091b6:	4b20      	ldr	r3, [pc, #128]	; (8009238 <USBD_LL_Init+0xac>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80091bc:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <USBD_LL_Init+0xac>)
 80091be:	2200      	movs	r2, #0
 80091c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091c2:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <USBD_LL_Init+0xac>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091c8:	481b      	ldr	r0, [pc, #108]	; (8009238 <USBD_LL_Init+0xac>)
 80091ca:	f7f8 fc05 	bl	80019d8 <HAL_PCD_Init>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80091d4:	f7f7 fd3a 	bl	8000c4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091de:	2318      	movs	r3, #24
 80091e0:	2200      	movs	r2, #0
 80091e2:	2100      	movs	r1, #0
 80091e4:	f7fa f924 	bl	8003430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091ee:	2358      	movs	r3, #88	; 0x58
 80091f0:	2200      	movs	r2, #0
 80091f2:	2180      	movs	r1, #128	; 0x80
 80091f4:	f7fa f91c 	bl	8003430 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091fe:	23c0      	movs	r3, #192	; 0xc0
 8009200:	2200      	movs	r2, #0
 8009202:	2181      	movs	r1, #129	; 0x81
 8009204:	f7fa f914 	bl	8003430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800920e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009212:	2200      	movs	r2, #0
 8009214:	2101      	movs	r1, #1
 8009216:	f7fa f90b 	bl	8003430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009224:	2200      	movs	r2, #0
 8009226:	2182      	movs	r1, #130	; 0x82
 8009228:	f7fa f902 	bl	8003430 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20001004 	.word	0x20001004
 800923c:	40005c00 	.word	0x40005c00

08009240 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009256:	4618      	mov	r0, r3
 8009258:	f7f8 fcbd 	bl	8001bd6 <HAL_PCD_Start>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f94e 	bl	8009504 <USBD_Get_USB_Status>
 8009268:	4603      	mov	r3, r0
 800926a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800926c:	7bbb      	ldrb	r3, [r7, #14]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	4608      	mov	r0, r1
 8009280:	4611      	mov	r1, r2
 8009282:	461a      	mov	r2, r3
 8009284:	4603      	mov	r3, r0
 8009286:	70fb      	strb	r3, [r7, #3]
 8009288:	460b      	mov	r3, r1
 800928a:	70bb      	strb	r3, [r7, #2]
 800928c:	4613      	mov	r3, r2
 800928e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800929e:	78bb      	ldrb	r3, [r7, #2]
 80092a0:	883a      	ldrh	r2, [r7, #0]
 80092a2:	78f9      	ldrb	r1, [r7, #3]
 80092a4:	f7f8 fe12 	bl	8001ecc <HAL_PCD_EP_Open>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f928 	bl	8009504 <USBD_Get_USB_Status>
 80092b4:	4603      	mov	r3, r0
 80092b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	460b      	mov	r3, r1
 80092cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092dc:	78fa      	ldrb	r2, [r7, #3]
 80092de:	4611      	mov	r1, r2
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7f8 fe50 	bl	8001f86 <HAL_PCD_EP_Close>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 f909 	bl	8009504 <USBD_Get_USB_Status>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800931a:	78fa      	ldrb	r2, [r7, #3]
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f7f8 fef8 	bl	8002114 <HAL_PCD_EP_SetStall>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 f8ea 	bl	8009504 <USBD_Get_USB_Status>
 8009330:	4603      	mov	r3, r0
 8009332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009334:	7bbb      	ldrb	r3, [r7, #14]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	4611      	mov	r1, r2
 800935c:	4618      	mov	r0, r3
 800935e:	f7f8 ff39 	bl	80021d4 <HAL_PCD_EP_ClrStall>
 8009362:	4603      	mov	r3, r0
 8009364:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f8cb 	bl	8009504 <USBD_Get_USB_Status>
 800936e:	4603      	mov	r3, r0
 8009370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009372:	7bbb      	ldrb	r3, [r7, #14]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800938e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009394:	2b00      	cmp	r3, #0
 8009396:	da0c      	bge.n	80093b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800939e:	68f9      	ldr	r1, [r7, #12]
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	440b      	add	r3, r1
 80093ac:	3302      	adds	r3, #2
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	e00b      	b.n	80093ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093b2:	78fb      	ldrb	r3, [r7, #3]
 80093b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093b8:	68f9      	ldr	r1, [r7, #12]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	00db      	lsls	r3, r3, #3
 80093c2:	440b      	add	r3, r1
 80093c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80093c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr

080093d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ee:	78fa      	ldrb	r2, [r7, #3]
 80093f0:	4611      	mov	r1, r2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7f8 fd45 	bl	8001e82 <HAL_PCD_SetAddress>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 f880 	bl	8009504 <USBD_Get_USB_Status>
 8009404:	4603      	mov	r3, r0
 8009406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009408:	7bbb      	ldrb	r3, [r7, #14]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b086      	sub	sp, #24
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	461a      	mov	r2, r3
 800941e:	460b      	mov	r3, r1
 8009420:	72fb      	strb	r3, [r7, #11]
 8009422:	4613      	mov	r3, r2
 8009424:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009434:	893b      	ldrh	r3, [r7, #8]
 8009436:	7af9      	ldrb	r1, [r7, #11]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	f7f8 fe34 	bl	80020a6 <HAL_PCD_EP_Transmit>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f85d 	bl	8009504 <USBD_Get_USB_Status>
 800944a:	4603      	mov	r3, r0
 800944c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800944e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	607a      	str	r2, [r7, #4]
 8009462:	461a      	mov	r2, r3
 8009464:	460b      	mov	r3, r1
 8009466:	72fb      	strb	r3, [r7, #11]
 8009468:	4613      	mov	r3, r2
 800946a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800947a:	893b      	ldrh	r3, [r7, #8]
 800947c:	7af9      	ldrb	r1, [r7, #11]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	f7f8 fdc9 	bl	8002016 <HAL_PCD_EP_Receive>
 8009484:	4603      	mov	r3, r0
 8009486:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 f83a 	bl	8009504 <USBD_Get_USB_Status>
 8009490:	4603      	mov	r3, r0
 8009492:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009494:	7dbb      	ldrb	r3, [r7, #22]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	4611      	mov	r1, r2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7f8 fddf 	bl	8002078 <HAL_PCD_EP_GetRxCount>
 80094ba:	4603      	mov	r3, r0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094cc:	4b02      	ldr	r3, [pc, #8]	; (80094d8 <USBD_static_malloc+0x14>)
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bc80      	pop	{r7}
 80094d6:	4770      	bx	lr
 80094d8:	200012f4 	.word	0x200012f4

080094dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]

}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr

080094ee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ee:	b480      	push	{r7}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80094fa:	bf00      	nop
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	bc80      	pop	{r7}
 8009502:	4770      	bx	lr

08009504 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	2b03      	cmp	r3, #3
 8009516:	d817      	bhi.n	8009548 <USBD_Get_USB_Status+0x44>
 8009518:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <USBD_Get_USB_Status+0x1c>)
 800951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951e:	bf00      	nop
 8009520:	08009531 	.word	0x08009531
 8009524:	08009537 	.word	0x08009537
 8009528:	0800953d 	.word	0x0800953d
 800952c:	08009543 	.word	0x08009543
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]
    break;
 8009534:	e00b      	b.n	800954e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009536:	2302      	movs	r3, #2
 8009538:	73fb      	strb	r3, [r7, #15]
    break;
 800953a:	e008      	b.n	800954e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800953c:	2301      	movs	r3, #1
 800953e:	73fb      	strb	r3, [r7, #15]
    break;
 8009540:	e005      	b.n	800954e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009542:	2302      	movs	r3, #2
 8009544:	73fb      	strb	r3, [r7, #15]
    break;
 8009546:	e002      	b.n	800954e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009548:	2302      	movs	r3, #2
 800954a:	73fb      	strb	r3, [r7, #15]
    break;
 800954c:	bf00      	nop
  }
  return usb_status;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	bc80      	pop	{r7}
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop

0800955c <__libc_init_array>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	2600      	movs	r6, #0
 8009560:	4d0c      	ldr	r5, [pc, #48]	; (8009594 <__libc_init_array+0x38>)
 8009562:	4c0d      	ldr	r4, [pc, #52]	; (8009598 <__libc_init_array+0x3c>)
 8009564:	1b64      	subs	r4, r4, r5
 8009566:	10a4      	asrs	r4, r4, #2
 8009568:	42a6      	cmp	r6, r4
 800956a:	d109      	bne.n	8009580 <__libc_init_array+0x24>
 800956c:	f000 f822 	bl	80095b4 <_init>
 8009570:	2600      	movs	r6, #0
 8009572:	4d0a      	ldr	r5, [pc, #40]	; (800959c <__libc_init_array+0x40>)
 8009574:	4c0a      	ldr	r4, [pc, #40]	; (80095a0 <__libc_init_array+0x44>)
 8009576:	1b64      	subs	r4, r4, r5
 8009578:	10a4      	asrs	r4, r4, #2
 800957a:	42a6      	cmp	r6, r4
 800957c:	d105      	bne.n	800958a <__libc_init_array+0x2e>
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	f855 3b04 	ldr.w	r3, [r5], #4
 8009584:	4798      	blx	r3
 8009586:	3601      	adds	r6, #1
 8009588:	e7ee      	b.n	8009568 <__libc_init_array+0xc>
 800958a:	f855 3b04 	ldr.w	r3, [r5], #4
 800958e:	4798      	blx	r3
 8009590:	3601      	adds	r6, #1
 8009592:	e7f2      	b.n	800957a <__libc_init_array+0x1e>
 8009594:	08009638 	.word	0x08009638
 8009598:	08009638 	.word	0x08009638
 800959c:	08009638 	.word	0x08009638
 80095a0:	0800963c 	.word	0x0800963c

080095a4 <memset>:
 80095a4:	4603      	mov	r3, r0
 80095a6:	4402      	add	r2, r0
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d100      	bne.n	80095ae <memset+0xa>
 80095ac:	4770      	bx	lr
 80095ae:	f803 1b01 	strb.w	r1, [r3], #1
 80095b2:	e7f9      	b.n	80095a8 <memset+0x4>

080095b4 <_init>:
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b6:	bf00      	nop
 80095b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ba:	bc08      	pop	{r3}
 80095bc:	469e      	mov	lr, r3
 80095be:	4770      	bx	lr

080095c0 <_fini>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	bf00      	nop
 80095c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c6:	bc08      	pop	{r3}
 80095c8:	469e      	mov	lr, r3
 80095ca:	4770      	bx	lr
